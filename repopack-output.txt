This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-11T01:03:58.448Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        java/
          com/
            pledge/
              pledgeApp/
                MainActivity.kt
                MainApplication.kt
        res/
          drawable/
            rn_edit_text_material.xml
            splashscreen.xml
          mipmap-anydpi-v26/
            ic_launcher_round.xml
            ic_launcher.xml
          values/
            colors.xml
            strings.xml
            styles.xml
          values-night/
            colors.xml
        AndroidManifest.xml
    build.gradle
    proguard-rules.pro
  gradle/
    wrapper/
      gradle-wrapper.properties
  react-settings-plugin/
    src/
      main/
        kotlin/
          expo/
            plugins/
              ReactSettingsPlugin.kt
    build.gradle.kts
  .gitignore
  build.gradle
  gradle.properties
  gradlew
  gradlew.bat
  settings.gradle
assets/
  data/
    mock-screen-time.ts
  fonts/
    Instrument_Serif/
      OFL.txt
  icons/
    onboarding-men-icon-harms-open.svg
    onboarding-men-icon-harms-open.tsx
    onboarding-men-icon.tsx
ios/
  Pledge/
    Images.xcassets/
      AppIcon.appiconset/
        Contents.json
      SplashScreen.imageset/
        Contents.json
      SplashScreenBackground.imageset/
        Contents.json
      Contents.json
    Supporting/
      Expo.plist
    AppDelegate.h
    AppDelegate.mm
    Info.plist
    main.m
    noop-file.swift
    Pledge-Bridging-Header.h
    Pledge.entitlements
    PledgeDebug.entitlements
    PrivacyInfo.xcprivacy
    SplashScreen.storyboard
  Pledge.xcodeproj/
    xcshareddata/
      xcschemes/
        Pledge.xcscheme
    project.pbxproj
  Pledge.xcworkspace/
    contents.xcworkspacedata
  .gitignore
  .xcode.env
  com.apple.developer.family-controls entitlement
  Pledge.entitlements
  Podfile
  Podfile.lock
  Podfile.properties.json
  ScreenTimeBridge.m
  ScreenTimeBridge.swift
src/
  components/
    buttons/
      main-button.tsx
      secondary-button.tsx
    cards/
      home-card-wrapper.tsx
    carousels/
      instructions-carousel.tsx
    checkboxs/
      main-checkbox.tsx
    headers/
      main-header.tsx
    layout/
      app-wrapper.tsx
    sliders/
      set-slider.tsx
      splash-slider.tsx
    switches/
      home-switch.tsx
  hooks/
    useAppInit.tsx
  lists/
    apps-onboarding-grid.tsx
    screen-time-list.tsx
  navigation/
    index.tsx
  screens/
    details/
      index.tsx
    home/
      index.tsx
    onboarding/
      setup/
        accept-terms.tsx
        challenge-on.tsx
        set-apps.tsx
        set-pledge.tsx
        set-time-limit.tsx
        set-up-payment.tsx
      index.tsx
      instructions.tsx
      login.tsx
      onboarding.tsx
      register.tsx
    payment/
      pay-with-stripe.tsx
      payment-popup.tsx
  services/
    auth.ts
    stripe-api.ts
  theme/
    colors.ts
  types/
    index.ts
  utils/
    constants/
      dimensions.ts
    fonts.ts
.gitignore
app.json
App.tsx
babel.config.js
eas.json
firebaseConfig.js
GoogleService-Info.plist
package.json
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: android/app/src/debug/AndroidManifest.xml
================
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>

    <application android:usesCleartextTraffic="true" tools:targetApi="28" tools:ignore="GoogleAppIndexingWarning" tools:replace="android:usesCleartextTraffic" />
</manifest>

================
File: android/app/src/main/java/com/pledge/pledgeApp/MainActivity.kt
================
package com.pledge.pledgeApp

import android.os.Build
import android.os.Bundle

import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled
import com.facebook.react.defaults.DefaultReactActivityDelegate

import expo.modules.ReactActivityDelegateWrapper

class MainActivity : ReactActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    // Set the theme to AppTheme BEFORE onCreate to support
    // coloring the background, status bar, and navigation bar.
    // This is required for expo-splash-screen.
    setTheme(R.style.AppTheme);
    super.onCreate(null)
  }

  /**
   * Returns the name of the main component registered from JavaScript. This is used to schedule
   * rendering of the component.
   */
  override fun getMainComponentName(): String = "main"

  /**
   * Returns the instance of the [ReactActivityDelegate]. We use [DefaultReactActivityDelegate]
   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]
   */
  override fun createReactActivityDelegate(): ReactActivityDelegate {
    return ReactActivityDelegateWrapper(
          this,
          BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,
          object : DefaultReactActivityDelegate(
              this,
              mainComponentName,
              fabricEnabled
          ){})
  }

  /**
    * Align the back button behavior with Android S
    * where moving root activities to background instead of finishing activities.
    * @see <a href="https://developer.android.com/reference/android/app/Activity#onBackPressed()">onBackPressed</a>
    */
  override fun invokeDefaultOnBackPressed() {
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {
          if (!moveTaskToBack(false)) {
              // For non-root activities, use the default implementation to finish them.
              super.invokeDefaultOnBackPressed()
          }
          return
      }

      // Use the default back button implementation on Android S
      // because it's doing more than [Activity.moveTaskToBack] in fact.
      super.invokeDefaultOnBackPressed()
  }
}

================
File: android/app/src/main/java/com/pledge/pledgeApp/MainApplication.kt
================
package com.pledge.pledgeApp

import android.app.Application
import android.content.res.Configuration

import com.facebook.react.PackageList
import com.facebook.react.ReactApplication
import com.facebook.react.ReactNativeHost
import com.facebook.react.ReactPackage
import com.facebook.react.ReactHost
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load
import com.facebook.react.defaults.DefaultReactNativeHost
import com.facebook.soloader.SoLoader

import expo.modules.ApplicationLifecycleDispatcher
import expo.modules.ReactNativeHostWrapper

class MainApplication : Application(), ReactApplication {

  override val reactNativeHost: ReactNativeHost = ReactNativeHostWrapper(
        this,
        object : DefaultReactNativeHost(this) {
          override fun getPackages(): List<ReactPackage> {
            // Packages that cannot be autolinked yet can be added manually here, for example:
            // packages.add(new MyReactNativePackage());
            return PackageList(this).packages
          }

          override fun getJSMainModuleName(): String = ".expo/.virtual-metro-entry"

          override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG

          override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
          override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED
      }
  )

  override val reactHost: ReactHost
    get() = ReactNativeHostWrapper.createReactHost(applicationContext, reactNativeHost)

  override fun onCreate() {
    super.onCreate()
    SoLoader.init(this, false)
    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
      // If you opted-in for the New Architecture, we load the native entry point for this app.
      load()
    }
    ApplicationLifecycleDispatcher.onApplicationCreate(this)
  }

  override fun onConfigurationChanged(newConfig: Configuration) {
    super.onConfigurationChanged(newConfig)
    ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)
  }
}

================
File: android/app/src/main/res/drawable/rn_edit_text_material.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<inset xmlns:android="http://schemas.android.com/apk/res/android"
       android:insetLeft="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetRight="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetTop="@dimen/abc_edit_text_inset_top_material"
       android:insetBottom="@dimen/abc_edit_text_inset_bottom_material"
       >

    <selector>
        <!--
          This file is a copy of abc_edit_text_material (https://bit.ly/3k8fX7I).
          The item below with state_pressed="false" and state_focused="false" causes a NullPointerException.
          NullPointerException:tempt to invoke virtual method 'android.graphics.drawable.Drawable android.graphics.drawable.Drawable$ConstantState.newDrawable(android.content.res.Resources)'

          <item android:state_pressed="false" android:state_focused="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>

          For more info, see https://bit.ly/3CdLStv (react-native/pull/29452) and https://bit.ly/3nxOMoR.
        -->
        <item android:state_enabled="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>
        <item android:drawable="@drawable/abc_textfield_activated_mtrl_alpha"/>
    </selector>

</inset>

================
File: android/app/src/main/res/drawable/splashscreen.xml
================
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:drawable="@color/splashscreen_background"/>
</layer-list>

================
File: android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/iconBackground"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>

================
File: android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/iconBackground"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>

================
File: android/app/src/main/res/values/colors.xml
================
<resources>
  <color name="splashscreen_background">#ffffff</color>
  <color name="iconBackground">#ffffff</color>
  <color name="colorPrimary">#023c69</color>
  <color name="colorPrimaryDark">#ffffff</color>
</resources>

================
File: android/app/src/main/res/values/strings.xml
================
<resources>
  <string name="app_name">Pledge</string>
  <string name="expo_splash_screen_resize_mode" translatable="false">cover</string>
  <string name="expo_splash_screen_status_bar_translucent" translatable="false">false</string>
</resources>

================
File: android/app/src/main/res/values/styles.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
  <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
    <item name="android:textColor">@android:color/black</item>
    <item name="android:editTextStyle">@style/ResetEditText</item>
    <item name="android:editTextBackground">@drawable/rn_edit_text_material</item>
    <item name="colorPrimary">@color/colorPrimary</item>
    <item name="android:statusBarColor">#ffffff</item>
  </style>
  <style name="ResetEditText" parent="@android:style/Widget.EditText">
    <item name="android:padding">0dp</item>
    <item name="android:textColorHint">#c8c8c8</item>
    <item name="android:textColor">@android:color/black</item>
  </style>
  <style name="Theme.App.SplashScreen" parent="AppTheme">
    <item name="android:windowBackground">@drawable/splashscreen</item>
  </style>
</resources>

================
File: android/app/src/main/res/values-night/colors.xml
================
<resources/>

================
File: android/app/src/main/AndroidManifest.xml
================
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
  <uses-permission android:name="android.permission.INTERNET"/>
  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
  <uses-permission android:name="android.permission.VIBRATE"/>
  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
  <queries>
    <intent>
      <action android:name="android.intent.action.VIEW"/>
      <category android:name="android.intent.category.BROWSABLE"/>
      <data android:scheme="https"/>
    </intent>
  </queries>
  <application android:name=".MainApplication" android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round" android:allowBackup="true" android:theme="@style/AppTheme">
    <meta-data android:name="expo.modules.updates.ENABLED" android:value="false"/>
    <meta-data android:name="expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH" android:value="ALWAYS"/>
    <meta-data android:name="expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS" android:value="0"/>
    <activity android:name=".MainActivity" android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|uiMode|locale|layoutDirection" android:launchMode="singleTask" android:windowSoftInputMode="adjustResize" android:theme="@style/Theme.App.SplashScreen" android:exported="true" android:screenOrientation="portrait">
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
      <intent-filter>
        <action android:name="android.intent.action.VIEW"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <category android:name="android.intent.category.BROWSABLE"/>
        <data android:scheme="com.pledge.pledgeApp"/>
        <data android:scheme="exp+pledge-app"/>
      </intent-filter>
    </activity>
    <activity android:name="com.facebook.react.devsupport.DevSettingsActivity" android:exported="false"/>
  </application>
</manifest>

================
File: android/app/build.gradle
================
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

static def versionToNumber(major, minor, patch) {
  return patch * 100 + minor * 10000 + major * 1000000
}

def getRNVersion() {
  def version = providers.exec {
    workingDir(projectDir)
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return versionToNumber(
      major,
      minor,
      patch
  )
}
def rnVersion = getRNVersion()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    if (rnVersion >= versionToNumber(0, 75, 0)) {
        /* Autolinking */
        autolinkLibrariesWithApp()
    }
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.pledge.pledgeApp'
    defaultConfig {
        applicationId 'com.pledge.pledgeApp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

if (rnVersion < versionToNumber(0, 75, 0)) {
    apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
    applyNativeModulesAppBuildGradle(project)
}

================
File: android/app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# react-native-reanimated
-keep class com.swmansion.reanimated.** { *; }
-keep class com.facebook.react.turbomodule.** { *; }

# Add any project specific keep options here:

================
File: android/gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.8-all.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: android/react-settings-plugin/src/main/kotlin/expo/plugins/ReactSettingsPlugin.kt
================
package expo.plugins

import org.gradle.api.Plugin
import org.gradle.api.initialization.Settings

class ReactSettingsPlugin : Plugin<Settings> {
  override fun apply(settings: Settings) {
    // Do nothing, just register the plugin.
  }
}

================
File: android/react-settings-plugin/build.gradle.kts
================
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm") version "1.9.24"
    id("java-gradle-plugin")
}

repositories {
    mavenCentral()
}

gradlePlugin {
    plugins {
        create("reactSettingsPlugin") {
            id = "com.facebook.react.settings"
            implementationClass = "expo.plugins.ReactSettingsPlugin"
        }
    }
}

================
File: android/.gitignore
================
# OSX
#
.DS_Store

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx/

# Bundle artifacts
*.jsbundle

================
File: android/build.gradle
================
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '34.0.0'
        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '23')
        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '34')
        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '34')
        kotlinVersion = findProperty('android.kotlinVersion') ?: '1.9.23'

        ndkVersion = "26.1.10909125"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath('com.android.tools.build:gradle')
        classpath('com.facebook.react:react-native-gradle-plugin')
        classpath('org.jetbrains.kotlin:kotlin-gradle-plugin')
    }
}

apply plugin: "com.facebook.react.rootproject"

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
        }
        maven {
            // Android JSC is installed from npm
            url(new File(['node', '--print', "require.resolve('jsc-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), '../dist'))
        }

        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }
}

================
File: android/gradle.properties
================
# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx512m -XX:MaxMetaspaceSize=256m
org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true

# Automatically convert third-party libraries to use AndroidX
android.enableJetifier=true

# Enable AAPT2 PNG crunching
android.enablePngCrunchInReleaseBuilds=true

# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64

# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric render in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
newArchEnabled=false

# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
hermesEnabled=true

# Enable GIF support in React Native images (~200 B increase)
expo.gif.enabled=true
# Enable webp support in React Native images (~85 KB increase)
expo.webp.enabled=true
# Enable animated webp support (~3.4 MB increase)
# Disabled by default because iOS doesn't support animated webp
expo.webp.animated=false

# Enable network inspector
EX_DEV_CLIENT_NETWORK_INSPECTOR=true

# Use legacy packaging to compress native libraries in the resulting APK.
expo.useLegacyPackaging=false

================
File: android/gradlew
================
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: android/gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: android/settings.gradle
================
pluginManagement {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()
  def (_, reactNativeMinor, reactNativePatch) = version.split("-")[0].tokenize('.').collect { it.toInteger() }

  includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())
  if(reactNativeMinor == 74 && reactNativePatch <= 3){
    includeBuild("react-settings-plugin")
  }
}

plugins { id("com.facebook.react.settings") }

def getRNMinorVersion() {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return minor
}

if (getRNMinorVersion() >= 75) {
  extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_UNSTABLE_CORE_AUTOLINKING') == '1') {
      println('\u001B[32mUsing expo-modules-autolinking as core autolinking source\u001B[0m')
      def command = [
        'node',
        '--no-warnings',
        '--eval',
        'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
        'react-native-config',
        '--json',
        '--platform',
        'android'
      ].toList()
      ex.autolinkLibrariesFromCommand(command)
    } else {
      ex.autolinkLibrariesFromCommand()
    }
  }
}

rootProject.name = 'Pledge'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

if (getRNMinorVersion() < 75) {
  apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
  applyNativeModulesSettingsGradle(settings)
}

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())

================
File: assets/data/mock-screen-time.ts
================
interface AppUsage {
  app: string;
  time: string;
  color: string;
  progress: number;
}

const data: AppUsage[] = [
  {
    app: "Instagram",
    time: "45m",
    color: "#F77E45",
    progress: 0.6,
  },
  {
    app: "Facebook",
    time: "25m",
    color: "#4167B2",
    progress: 0.3,
  },
  {
    app: "X",
    time: "25m",
    color: "#E4405F",
    progress: 0.3,
  },
];

export default data;

================
File: assets/fonts/Instrument_Serif/OFL.txt
================
Copyright 2022 The Instrument Serif Project Authors (https://github.com/Instrument/instrument-serif)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
https://openfontlicense.org


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

================
File: assets/icons/onboarding-men-icon-harms-open.svg
================
<svg width="335" height="315" viewBox="0 0 335 315" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M122.529 191.562L108.554 184.942C108.536 191.961 105.4 208 93 216L46.5 205.5C44.3333 202.5 39 197.1 35 199.5C29.8333 200.667 15.8 202.8 0.999985 202C2.33332 208.167 11.8 219 39 213C54.3333 221.833 89.3 238.8 106.5 236C114.186 226.541 128.152 204.411 122.529 191.562Z" fill="#FAB197"/>
<path d="M122.529 191.562L108.554 184.942C108.536 191.961 105.4 208 93 216L46.5 205.5C44.3333 202.5 39 197.1 35 199.5C29.8333 200.667 15.8 202.8 0.999985 202C2.33332 208.167 11.8 219 39 213C54.3333 221.833 89.3 238.8 106.5 236C114.186 226.541 128.152 204.411 122.529 191.562ZM122.529 191.562L112.231 215.099" stroke="#FAB197" stroke-width="1.47107"/>
<path d="M215.889 194.503L226.975 186.412C227.317 194.108 230.8 211.7 242 220.5L289 209.5C291.5 206.833 297.3 201.8 300.5 203C302.5 205.333 312 209.3 334 206.5C333.5 211.667 325.4 221.1 297 217.5C291 223.5 269 236.6 229 241C223.667 234.667 212.5 217 210.5 197L215.889 194.503Z" fill="#FAB197" stroke="#FAB197" stroke-width="1.47107"/>
<path d="M83 63.5782C75.3504 126.54 115.599 129.041 147.718 129.776H166.842C233.334 125.657 255.557 88.0001 248 63.5784C217.807 -33.9999 99.0757 -6.28925 83 63.5782Z" fill="#FD9E6B"/>
<path d="M141.653 99.6196L148.272 101.091L151.215 107.71L149.008 112.124C141.358 110.947 140.917 103.297 141.653 99.6196Z" fill="#ED957D" stroke="#ED957D" stroke-width="1.47107"/>
<path d="M197.554 98.8847L190.934 100.356L187.992 106.976L190.199 111.389C197.848 110.212 198.29 102.562 197.554 98.8847Z" fill="#ED957D" stroke="#ED957D" stroke-width="1.47107"/>
<path d="M177.694 129.041H160.041L160.777 134.19H176.959L177.694 129.041Z" fill="#ED957D"/>
<path d="M125.471 312.926C112.526 311.749 114.193 307.532 116.645 305.571C125.471 297.48 139.446 298.951 141.653 298.951C143.418 298.951 149.744 292.576 152.686 289.389H160.777L166.661 293.802C167.397 294.047 169.015 294.537 169.603 294.537C170.339 294.537 171.81 290.86 172.546 290.86C173.134 290.86 177.449 294.783 179.165 296.744L179.901 313.661L125.471 312.926Z" fill="#FAB197" stroke="#FAB197" stroke-width="1.47107"/>
<path d="M55.5951 246.727C74.4249 240.254 111.986 249.424 128.413 254.818L132.827 247.463L123.265 244.52L124.736 193.033L107.818 182.735C110.172 158.61 136.259 149.146 149.008 147.43C149.008 165.082 162.248 169.496 168.868 169.496C183.579 169.496 187.992 155.275 188.727 147.43C211.676 148.018 224.278 171.702 227.711 183.471C225.357 191.709 213.49 195.73 207.851 196.711L210.793 245.992L204.909 247.463L207.851 256.289L213 254.818C236.537 248.345 265.959 248.198 277.727 248.934C290.084 248.934 291.212 261.683 290.232 268.058C289.055 282.18 245.119 300.421 223.298 307.777L216.678 311.454H180.636L178.43 293.801C176.959 292.576 173.722 290.124 172.546 290.124C171.369 290.124 172.055 292.085 172.546 293.066L166.661 293.801L162.248 290.124H153.422L141.653 298.215L126.942 301.157L116.645 305.57C87.8117 300.863 63.9312 283.504 55.5951 275.413C39.7075 260.114 48.9753 249.914 55.5951 246.727Z" fill="#FF5900" stroke="#FF5900" stroke-width="1.47107"/>
<path d="M79.1323 257.76C85.9973 268.058 109.731 288.506 149.744 287.917C133.807 276.884 97.3736 255.407 79.1323 257.76Z" fill="#C24400"/>
<path d="M258.603 259.41C251.738 269.708 228.005 290.156 187.992 289.567C203.928 278.534 240.362 257.056 258.603 259.41Z" fill="#C24400"/>
<path d="M160.33 129.777C162.684 145.076 155.138 147.92 150.479 147.43C155.775 163.906 164.743 166.554 169.157 165.818C180.925 165.818 186.319 153.559 187.545 147.43C177.542 147.43 175.531 135.661 175.776 129.777C189.016 120.215 191.958 103.298 190.487 103.298C189.31 103.298 189.016 97.4134 189.016 94.4713C186.662 90.9407 177.738 86.1352 173.57 84.1738C167.097 91.8234 156.652 96.1875 152.239 97.4134C146.943 99.1787 148.071 106.975 149.297 110.653C151.062 119.48 157.388 127.08 160.33 129.777Z" fill="#FEB093" stroke="#FEB093" stroke-width="1.47107"/>
<path d="M150.479 146.694C150.479 164.936 162.493 167.534 168.868 167.289C181.813 167.878 187.011 154.295 187.992 146.694" stroke="#BA4405" stroke-width="4.41322"/>
</svg>

================
File: assets/icons/onboarding-men-icon-harms-open.tsx
================
import * as React from "react";
import Svg, { Path } from "react-native-svg";

function OnboardingMenIconHarmsOpen({ width, height, style }) {
  return (
    <Svg
      width={width}
      height={height}
      viewBox="0 0 335 315"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={style}
    >
      <Path
        d="M122.529 191.562l-13.975-6.62C108.536 191.961 105.4 208 93 216l-46.5-10.5c-2.167-3-7.5-8.4-11.5-6-5.167 1.167-19.2 3.3-34 2.5 1.333 6.167 10.8 17 38 11 15.333 8.833 50.3 25.8 67.5 23 7.686-9.459 21.652-31.589 16.029-44.438z"
        fill="#FAB197"
      />
      <Path
        d="M122.529 191.562l-13.975-6.62C108.536 191.961 105.4 208 93 216l-46.5-10.5c-2.167-3-7.5-8.4-11.5-6-5.167 1.167-19.2 3.3-34 2.5 1.333 6.167 10.8 17 38 11 15.333 8.833 50.3 25.8 67.5 23 7.686-9.459 21.652-31.589 16.029-44.438zm0 0l-10.298 23.537"
        stroke="#FAB197"
        strokeWidth={1.47107}
      />
      <Path
        d="M215.889 194.503l11.086-8.091c.342 7.696 3.825 25.288 15.025 34.088l47-11c2.5-2.667 8.3-7.7 11.5-6.5 2 2.333 11.5 6.3 33.5 3.5-.5 5.167-8.6 14.6-37 11-6 6-28 19.1-68 23.5-5.333-6.333-16.5-24-18.5-44l5.389-2.497z"
        fill="#FAB197"
        stroke="#FAB197"
        strokeWidth={1.47107}
      />
      <Path
        d="M83 63.578c-7.65 62.962 32.599 65.463 64.718 66.198h19.124C233.334 125.657 255.557 88 248 63.578 217.807-34 99.076-6.289 83 63.578z"
        fill="#FD9E6B"
      />
      <Path
        d="M141.653 99.62l6.619 1.471 2.943 6.619-2.207 4.414c-7.65-1.177-8.091-8.827-7.355-12.504zM197.554 98.885l-6.62 1.471-2.942 6.62 2.207 4.413c7.649-1.177 8.091-8.827 7.355-12.504z"
        fill="#ED957D"
        stroke="#ED957D"
        strokeWidth={1.47107}
      />
      <Path
        d="M177.694 129.041h-17.653l.736 5.149h16.182l.735-5.149z"
        fill="#ED957D"
      />
      <Path
        d="M125.471 312.926c-12.945-1.177-11.278-5.394-8.826-7.355 8.826-8.091 22.801-6.62 25.008-6.62 1.765 0 8.091-6.375 11.033-9.562h8.091l5.884 4.413c.736.245 2.354.735 2.942.735.736 0 2.207-3.677 2.943-3.677.588 0 4.903 3.923 6.619 5.884l.736 16.917-54.43-.735z"
        fill="#FAB197"
        stroke="#FAB197"
        strokeWidth={1.47107}
      />
      <Path
        d="M55.595 246.727c18.83-6.473 56.391 2.697 72.818 8.091l4.414-7.355-9.562-2.943 1.471-51.487-16.918-10.298c2.354-24.125 28.441-33.589 41.19-35.305 0 17.652 13.24 22.066 19.86 22.066 14.711 0 19.124-14.221 19.859-22.066 22.949.588 35.551 24.272 38.984 36.041-2.354 8.238-14.221 12.259-19.86 13.24l2.942 49.281-5.884 1.471 2.942 8.826 5.149-1.471c23.537-6.473 52.959-6.62 64.727-5.884 12.357 0 13.485 12.749 12.505 19.124-1.177 14.122-45.113 32.363-66.934 39.719l-6.62 3.677h-36.042l-2.206-17.653c-1.471-1.225-4.708-3.677-5.884-3.677-1.177 0-.491 1.961 0 2.942l-5.885.735-4.413-3.677h-8.826l-11.769 8.091-14.711 2.942-10.297 4.413c-28.833-4.707-52.714-22.066-61.05-30.157-15.887-15.299-6.62-25.499 0-28.686z"
        fill="#FF5900"
        stroke="#FF5900"
        strokeWidth={1.47107}
      />
      <Path
        d="M79.132 257.76c6.865 10.298 30.599 30.746 70.612 30.157-15.937-11.033-52.37-32.51-70.612-30.157zM258.603 259.41c-6.865 10.298-30.598 30.746-70.611 30.157 15.936-11.033 52.37-32.511 70.611-30.157z"
        fill="#C24400"
      />
      <Path
        d="M160.33 129.777c2.354 15.299-5.192 18.143-9.851 17.653 5.296 16.476 14.264 19.124 18.678 18.388 11.768 0 17.162-12.259 18.388-18.388-10.003 0-12.014-11.769-11.769-17.653 13.24-9.562 16.182-26.479 14.711-26.479-1.177 0-1.471-5.885-1.471-8.827-2.354-3.53-11.278-8.336-15.446-10.297-6.473 7.65-16.918 12.013-21.331 13.24-5.296 1.765-4.168 9.561-2.942 13.239 1.765 8.827 8.091 16.427 11.033 19.124z"
        fill="#FEB093"
        stroke="#FEB093"
        strokeWidth={1.47107}
      />
      <Path
        d="M150.479 146.694c0 18.242 12.014 20.84 18.389 20.595 12.945.589 18.143-12.994 19.124-20.595"
        stroke="#BA4405"
        strokeWidth={4.41322}
      />
    </Svg>
  );
}

export default OnboardingMenIconHarmsOpen;

================
File: assets/icons/onboarding-men-icon.tsx
================
import * as React from "react";
import Svg, { Path, Rect } from "react-native-svg";

function OnboardingMenIcon({ width, height, style }) {
  return (
    <Svg
      width={width}
      height={height}
      viewBox="0 0 390 780"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={style}
    >
      <Path
        d="M86.924 513.868c-7.65 62.962 54.675 80.173 86.794 80.909h19.124c66.492-4.119 83.606-45.849 83.851-66.199-5.296-38.836 12.504-51.978 22.066-53.694 44.132-4.707 48.3-36.286 44.868-51.488-18.83-40.601 1.471-62.52 13.975-68.404 32.952-4.708 39.595-41.762 36.898-55.492-11.769-37.071 3.066-52.142 13.854-59.252l60.314-4.413C604.595-137.23 357.602-154 192.842-154c-324.225 0-339.328 252.29-286.86 377.33l48.546 12.505C-21.935 249.368-20.464 278.25-22.671 291c-12.357 36.482 5.149 51.978 15.446 55.165 35.895 10.592 37.513 40.7 33.835 54.43-7.65 45.309 7.11 63.992 15.447 67.669 41.778 4.708 47.32 32.364 44.867 45.604z"
        fill="#FD9E6B"
      />
      <Path
        d="M167.653 564.62l6.619 1.471 2.943 6.62-2.207 4.413c-7.65-1.177-8.091-8.827-7.355-12.504zM223.554 563.885l-6.62 1.471-2.942 6.62 2.207 4.413c7.649-1.177 8.091-8.827 7.355-12.504z"
        fill="#ED957D"
        stroke="#ED957D"
        strokeWidth={1.47107}
      />
      <Path
        d="M203.694 594.041h-17.653l.736 5.149h16.182l.735-5.149z"
        fill="#ED957D"
      />
      <Path
        d="M151.471 777.926c-12.945-1.177-11.278-5.394-8.826-7.356 8.826-8.09 22.801-6.619 25.008-6.619 1.765 0 8.091-6.375 11.033-9.562h8.091l5.884 4.413c.736.245 2.354.735 2.942.735.736 0 2.207-3.677 2.943-3.677.588 0 4.903 3.923 6.619 5.884l.736 16.917-54.43-.735z"
        fill="#FAB197"
        stroke="#FAB197"
        strokeWidth={1.47107}
      />
      <Path
        d="M81.595 711.727c18.83-6.473 56.391 2.697 72.818 8.091l4.414-7.355-9.562-2.942 1.471-51.488-16.918-10.298c2.354-24.125 28.441-33.589 41.19-35.305 0 17.653 13.24 22.066 19.86 22.066 14.711 0 19.124-14.221 19.859-22.066 22.949.588 35.551 24.272 38.984 36.041-2.354 8.238-14.221 12.259-19.86 13.24l2.942 49.281-5.884 1.471 2.942 8.826 5.149-1.471c23.537-6.473 52.959-6.62 64.727-5.884 12.357 0 13.485 12.749 12.505 19.124-1.177 14.122-45.113 32.363-66.934 39.719l-6.62 3.677h-36.042l-2.206-17.652c-1.471-1.226-4.708-3.678-5.884-3.678-1.177 0-.491 1.961 0 2.942l-5.885.736-4.413-3.678h-8.826l-11.769 8.091-14.711 2.942-10.297 4.413c-28.833-4.707-52.714-22.066-61.05-30.157-15.888-15.299-6.62-25.499 0-28.686z"
        fill="#FF5900"
        stroke="#FF5900"
        strokeWidth={1.47107}
      />
      <Path
        d="M105.132 722.76c6.865 10.298 30.599 30.746 70.612 30.157-15.937-11.033-52.37-32.51-70.612-30.157zM284.603 724.41c-6.865 10.298-30.598 30.746-70.611 30.157 15.936-11.033 52.37-32.511 70.611-30.157z"
        fill="#C24400"
      />
      <Path
        d="M186.33 594.777c2.354 15.299-5.192 18.143-9.851 17.653 5.296 16.476 14.264 19.124 18.678 18.388 11.768 0 17.162-12.258 18.388-18.388-10.003 0-12.014-11.769-11.769-17.653 13.24-9.562 16.182-26.479 14.711-26.479-1.177 0-1.471-5.885-1.471-8.827-2.354-3.53-11.278-8.336-15.446-10.297-6.473 7.649-16.918 12.014-21.331 13.239-5.296 1.766-4.168 9.562-2.942 13.24 1.765 8.827 8.091 16.427 11.033 19.124z"
        fill="#FEB093"
        stroke="#FEB093"
        strokeWidth={1.47107}
      />
      <Path
        d="M176.479 611.694c0 18.242 12.014 20.841 18.389 20.595 12.945.589 18.143-12.994 19.124-20.595"
        stroke="#BA4405"
        strokeWidth={4.41322}
      />
      <Path
        d="M148.529 656.562l-13.975-6.62c-6.533 9.317-16.77 28.833-10.298 35.306 10.543 8.336 35.894 25.155 52.959 25.743.245 2.452 1.618 8.091 5.149 11.034 5.884-.491 14.563-5.443 2.206-21.331-12.013-3.923-44.573-14.711-46.339-20.595l10.298-23.537zM241.889 659.504l11.086-8.091c6.533 9.316 16.435 25.891 9.962 32.363-10.543 8.336-35.894 25.156-52.959 25.744-.245 2.452-1.618 8.091-5.149 11.033-5.884-.49-14.563-5.443-2.206-21.33 12.014-3.923 47.116-13.976 48.881-19.86l-9.615-19.859z"
        fill="#FAB197"
        stroke="#FAB197"
        strokeWidth={1.47107}
      />
      <Rect
        x={183.099}
        y={699.223}
        width={20.595}
        height={30.8926}
        rx={2.94215}
        fill="#585858"
        stroke="#000"
        strokeWidth={2.94215}
      />
      <Path fill="#6681FF" d="M186.041 702.166H188.98315V705.10815H186.041z" />
      <Path fill="#55433B" d="M190.455 702.166H193.39715V705.10815H190.455z" />
      <Path fill="#0050EB" d="M194.868 702.166H197.81015V705.10815H194.868z" />
      <Path
        fill="#D563E1"
        d="M190.455 706.579H193.39715V709.5211499999999H190.455z"
      />
      <Path
        fill="#FF5900"
        d="M194.868 706.579H197.81015V709.5211499999999H194.868z"
      />
      <Path fill="#D9D9D9" d="M190.455 710.991H193.39715V713.93315H190.455z" />
      <Path
        fill="#00AF9F"
        d="M186.041 706.579H188.98315V709.5211499999999H186.041z"
      />
      <Path fill="#00AB03" d="M186.041 710.991H188.98315V713.93315H186.041z" />
    </Svg>
  );
}

export default OnboardingMenIcon;

================
File: ios/Pledge/Images.xcassets/AppIcon.appiconset/Contents.json
================
{
  "images": [
    {
      "filename": "App-Icon-1024x1024@1x.png",
      "idiom": "universal",
      "platform": "ios",
      "size": "1024x1024"
    }
  ],
  "info": {
    "version": 1,
    "author": "expo"
  }
}

================
File: ios/Pledge/Images.xcassets/SplashScreen.imageset/Contents.json
================
{
  "images": [
    {
      "idiom": "universal",
      "filename": "image.png",
      "scale": "1x"
    },
    {
      "idiom": "universal",
      "scale": "2x"
    },
    {
      "idiom": "universal",
      "scale": "3x"
    }
  ],
  "info": {
    "version": 1,
    "author": "expo"
  }
}

================
File: ios/Pledge/Images.xcassets/SplashScreenBackground.imageset/Contents.json
================
{
  "images": [
    {
      "idiom": "universal",
      "filename": "image.png",
      "scale": "1x"
    },
    {
      "idiom": "universal",
      "scale": "2x"
    },
    {
      "idiom": "universal",
      "scale": "3x"
    }
  ],
  "info": {
    "version": 1,
    "author": "expo"
  }
}

================
File: ios/Pledge/Images.xcassets/Contents.json
================
{
  "info" : {
    "version" : 1,
    "author" : "expo"
  }
}

================
File: ios/Pledge/Supporting/Expo.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>EXUpdatesCheckOnLaunch</key>
    <string>ALWAYS</string>
    <key>EXUpdatesEnabled</key>
    <false/>
    <key>EXUpdatesLaunchWaitMs</key>
    <integer>0</integer>
  </dict>
</plist>

================
File: ios/Pledge/AppDelegate.h
================
#import <RCTAppDelegate.h>
#import <UIKit/UIKit.h>
#import <Expo/Expo.h>

@interface AppDelegate : EXAppDelegateWrapper

@end

================
File: ios/Pledge/AppDelegate.mm
================
#import "AppDelegate.h"

#import <React/RCTBundleURLProvider.h>
#import <React/RCTLinkingManager.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  self.moduleName = @"main";

  // You can add your custom initial props in the dictionary below.
  // They will be passed down to the ViewController used by React Native.
  self.initialProps = @{};

  return [super application:application didFinishLaunchingWithOptions:launchOptions];
}

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
  return [self bundleURL];
}

- (NSURL *)bundleURL
{
#if DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@".expo/.virtual-metro-entry"];
#else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}

// Linking API
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
  return [super application:application openURL:url options:options] || [RCTLinkingManager application:application openURL:url options:options];
}

// Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
  BOOL result = [RCTLinkingManager application:application continueUserActivity:userActivity restorationHandler:restorationHandler];
  return [super application:application continueUserActivity:userActivity restorationHandler:restorationHandler] || result;
}

// Explicitly define remote notification delegates to ensure compatibility with some third-party libraries
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  return [super application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

// Explicitly define remote notification delegates to ensure compatibility with some third-party libraries
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
  return [super application:application didFailToRegisterForRemoteNotificationsWithError:error];
}

// Explicitly define remote notification delegates to ensure compatibility with some third-party libraries
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
  return [super application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
}

@end

================
File: ios/Pledge/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Pledge</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleURLTypes</key>
	<array>
		<dict>
			<key>CFBundleURLSchemes</key>
			<array>
				<string>com.pledgeinc.pledge</string>
			</array>
		</dict>
		<dict>
			<key>CFBundleURLSchemes</key>
			<array>
				<string>exp+pledge-app</string>
			</array>
		</dict>
	</array>
	<key>CFBundleVersion</key>
	<string>4</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoads</key>
		<false/>
		<key>NSAllowsLocalNetworking</key>
		<true/>
	</dict>
	<key>NSCameraUsageDescription</key>
	<string>Pledge does not usage camera for any purpose</string>
	<key>UILaunchStoryboardName</key>
	<string>SplashScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>arm64</string>
	</array>
	<key>UIRequiresFullScreen</key>
	<false/>
	<key>UIStatusBarStyle</key>
	<string>UIStatusBarStyleDefault</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIUserInterfaceStyle</key>
	<string>Light</string>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
</dict>
</plist>

================
File: ios/Pledge/main.m
================
#import <UIKit/UIKit.h>

#import "AppDelegate.h"

int main(int argc, char * argv[]) {
  @autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
  }
}

================
File: ios/Pledge/noop-file.swift
================
//
// @generated
// A blank Swift file must be created for native modules with Swift files to work correctly.
//

================
File: ios/Pledge/Pledge-Bridging-Header.h
================
//
//  Use this file to import your target's public headers that you would like to expose to Swift.
//
#import <React/RCTBridgeModule.h>

================
File: ios/Pledge/Pledge.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict/>
</plist>

================
File: ios/Pledge/PledgeDebug.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.developer.family-controls</key>
	<true/>
</dict>
</plist>

================
File: ios/Pledge/PrivacyInfo.xcprivacy
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSPrivacyAccessedAPITypes</key>
	<array>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryUserDefaults</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>CA92.1</string>
				<string>1C8F.1</string>
				<string>C56D.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>0A2A.1</string>
				<string>3B52.1</string>
				<string>C617.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryDiskSpace</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>E174.1</string>
				<string>85F4.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategorySystemBootTime</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>35F9.1</string>
			</array>
		</dict>
	</array>
	<key>NSPrivacyCollectedDataTypes</key>
	<array/>
	<key>NSPrivacyTracking</key>
	<false/>
</dict>
</plist>

================
File: ios/Pledge/SplashScreen.storyboard
================
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="16096" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="EXPO-VIEWCONTROLLER-1">
    <device id="retina5_5" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="16087"/>
        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <scene sceneID="EXPO-SCENE-1">
            <objects>
                <viewController storyboardIdentifier="SplashScreenViewController" id="EXPO-VIEWCONTROLLER-1" sceneMemberID="viewController">
                    <view key="view" userInteractionEnabled="NO" contentMode="scaleToFill" insetsLayoutMarginsFromSafeArea="NO" id="EXPO-ContainerView" userLabel="ContainerView">
                        <rect key="frame" x="0.0" y="0.0" width="414" height="736"/>
                        <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                        <subviews>
                            <imageView userInteractionEnabled="NO" contentMode="scaleAspectFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" insetsLayoutMarginsFromSafeArea="NO" image="SplashScreenBackground" translatesAutoresizingMaskIntoConstraints="NO" id="EXPO-SplashScreenBackground" userLabel="SplashScreenBackground">
                                <rect key="frame" x="0.0" y="0.0" width="414" height="736"/>
                            </imageView>
                            <imageView id="EXPO-SplashScreen" userLabel="SplashScreen" image="SplashScreen" contentMode="scaleAspectFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" clipsSubviews="true" userInteractionEnabled="false" translatesAutoresizingMaskIntoConstraints="false">
                                <rect key="frame" x="0" y="0" width="414" height="736"/>
                            </imageView>
                        </subviews>
                        <constraints>
                            <constraint firstItem="EXPO-SplashScreenBackground" firstAttribute="top" secondItem="EXPO-ContainerView" secondAttribute="top" id="1gX-mQ-vu6"/>
                            <constraint firstItem="EXPO-SplashScreenBackground" firstAttribute="leading" secondItem="EXPO-ContainerView" secondAttribute="leading" id="6tX-OG-Sck"/>
                            <constraint firstItem="EXPO-SplashScreenBackground" firstAttribute="trailing" secondItem="EXPO-ContainerView" secondAttribute="trailing" id="ABX-8g-7v4"/>
                            <constraint firstItem="EXPO-SplashScreenBackground" firstAttribute="bottom" secondItem="EXPO-ContainerView" secondAttribute="bottom" id="jkI-2V-eW5"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="top" secondItem="EXPO-ContainerView" secondAttribute="top" id="2VS-Uz-0LU"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="leading" secondItem="EXPO-ContainerView" secondAttribute="leading" id="LhH-Ei-DKo"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="trailing" secondItem="EXPO-ContainerView" secondAttribute="trailing" id="I6l-TP-6fn"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="bottom" secondItem="EXPO-ContainerView" secondAttribute="bottom" id="nbp-HC-eaG"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="top" secondItem="EXPO-ContainerView" secondAttribute="top" id="83fcb9b545b870ba44c24f0feeb116490c499c52"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="leading" secondItem="EXPO-ContainerView" secondAttribute="leading" id="61d16215e44b98e39d0a2c74fdbfaaa22601b12c"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="trailing" secondItem="EXPO-ContainerView" secondAttribute="trailing" id="f934da460e9ab5acae3ad9987d5b676a108796c1"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="bottom" secondItem="EXPO-ContainerView" secondAttribute="bottom" id="d6a0be88096b36fb132659aa90203d39139deda9"/>
                        </constraints>
                        <viewLayoutGuide key="safeArea" id="Rmq-lb-GrQ"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="EXPO-PLACEHOLDER-1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="140.625" y="129.4921875"/>
        </scene>
    </scenes>
    <resources>
        <image name="SplashScreenBackground" width="1" height="1"/>
        <image name="SplashScreen" width="414" height="736"/>
    </resources>
</document>

================
File: ios/Pledge.xcodeproj/xcshareddata/xcschemes/Pledge.xcscheme
================
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1130"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
               BuildableName = "Pledge.app"
               BlueprintName = "Pledge"
               ReferencedContainer = "container:Pledge.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "00E356ED1AD99517003FC87E"
               BuildableName = "PledgeTests.xctest"
               BlueprintName = "PledgeTests"
               ReferencedContainer = "container:Pledge.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "Pledge.app"
            BlueprintName = "Pledge"
            ReferencedContainer = "container:Pledge.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "Pledge.app"
            BlueprintName = "Pledge"
            ReferencedContainer = "container:Pledge.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

================
File: ios/Pledge.xcodeproj/project.pbxproj
================
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		13B07FBC1A68108700A75B9A /* AppDelegate.mm in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB01A68108700A75B9A /* AppDelegate.mm */; };
		13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 13B07FB51A68108700A75B9A /* Images.xcassets */; };
		13B07FC11A68108700A75B9A /* main.m in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB71A68108700A75B9A /* main.m */; };
		1AEA617C58C1D546DC9020F4 /* PrivacyInfo.xcprivacy in Resources */ = {isa = PBXBuildFile; fileRef = CFC6154BCF4A416DF34EB5B1 /* PrivacyInfo.xcprivacy */; };
		2FBE32FDF0674CA9AA9E2296 /* noop-file.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6C40C9682BC34988B491806D /* noop-file.swift */; };
		3E461D99554A48A4959DE609 /* SplashScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */; };
		63E2830AE4F53E60AB4A9E78 /* Pods_Pledge.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 85D556130ABBF5680DF5F4B4 /* Pods_Pledge.framework */; };
		B18059E884C0ABDD17F3DC3D /* ExpoModulesProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = FAC715A2D49A985799AEE119 /* ExpoModulesProvider.swift */; };
		BB2F792D24A3F905000567C9 /* Expo.plist in Resources */ = {isa = PBXBuildFile; fileRef = BB2F792C24A3F905000567C9 /* Expo.plist */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		13192BBC2CDCFB9D00101950 /* PledgeDebug.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; name = PledgeDebug.entitlements; path = Pledge/PledgeDebug.entitlements; sourceTree = "<group>"; };
		13B07F961A680F5B00A75B9A /* Pledge.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Pledge.app; sourceTree = BUILT_PRODUCTS_DIR; };
		13B07FAF1A68108700A75B9A /* AppDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AppDelegate.h; path = Pledge/AppDelegate.h; sourceTree = "<group>"; };
		13B07FB01A68108700A75B9A /* AppDelegate.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; name = AppDelegate.mm; path = Pledge/AppDelegate.mm; sourceTree = "<group>"; };
		13B07FB51A68108700A75B9A /* Images.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Images.xcassets; path = Pledge/Images.xcassets; sourceTree = "<group>"; };
		13B07FB61A68108700A75B9A /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = Info.plist; path = Pledge/Info.plist; sourceTree = "<group>"; };
		13B07FB71A68108700A75B9A /* main.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; name = main.m; path = Pledge/main.m; sourceTree = "<group>"; };
		6C2E3173556A471DD304B334 /* Pods-Pledge.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Pledge.debug.xcconfig"; path = "Target Support Files/Pods-Pledge/Pods-Pledge.debug.xcconfig"; sourceTree = "<group>"; };
		6C40C9682BC34988B491806D /* noop-file.swift */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 4; includeInIndex = 0; lastKnownFileType = sourcecode.swift; name = "noop-file.swift"; path = "Pledge/noop-file.swift"; sourceTree = "<group>"; };
		7A4D352CD337FB3A3BF06240 /* Pods-Pledge.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Pledge.release.xcconfig"; path = "Target Support Files/Pods-Pledge/Pods-Pledge.release.xcconfig"; sourceTree = "<group>"; };
		85D556130ABBF5680DF5F4B4 /* Pods_Pledge.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Pledge.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.storyboard; name = SplashScreen.storyboard; path = Pledge/SplashScreen.storyboard; sourceTree = "<group>"; };
		BB2F792C24A3F905000567C9 /* Expo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = Expo.plist; sourceTree = "<group>"; };
		CFC6154BCF4A416DF34EB5B1 /* PrivacyInfo.xcprivacy */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xml; name = PrivacyInfo.xcprivacy; path = Pledge/PrivacyInfo.xcprivacy; sourceTree = "<group>"; };
		DD621FC6E64C4EFEB4308C73 /* Pledge-Bridging-Header.h */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 4; includeInIndex = 0; lastKnownFileType = sourcecode.c.h; name = "Pledge-Bridging-Header.h"; path = "Pledge/Pledge-Bridging-Header.h"; sourceTree = "<group>"; };
		ED297162215061F000B7C4FE /* JavaScriptCore.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = JavaScriptCore.framework; path = System/Library/Frameworks/JavaScriptCore.framework; sourceTree = SDKROOT; };
		FAC715A2D49A985799AEE119 /* ExpoModulesProvider.swift */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.swift; name = ExpoModulesProvider.swift; path = "Pods/Target Support Files/Pods-Pledge/ExpoModulesProvider.swift"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		13B07F8C1A680F5B00A75B9A /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				63E2830AE4F53E60AB4A9E78 /* Pods_Pledge.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		13B07FAE1A68108700A75B9A /* Pledge */ = {
			isa = PBXGroup;
			children = (
				13192BBC2CDCFB9D00101950 /* PledgeDebug.entitlements */,
				BB2F792B24A3F905000567C9 /* Supporting */,
				13B07FAF1A68108700A75B9A /* AppDelegate.h */,
				13B07FB01A68108700A75B9A /* AppDelegate.mm */,
				13B07FB51A68108700A75B9A /* Images.xcassets */,
				13B07FB61A68108700A75B9A /* Info.plist */,
				13B07FB71A68108700A75B9A /* main.m */,
				AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */,
				6C40C9682BC34988B491806D /* noop-file.swift */,
				DD621FC6E64C4EFEB4308C73 /* Pledge-Bridging-Header.h */,
				CFC6154BCF4A416DF34EB5B1 /* PrivacyInfo.xcprivacy */,
			);
			name = Pledge;
			sourceTree = "<group>";
		};
		2D16E6871FA4F8E400B85C8A /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				ED297162215061F000B7C4FE /* JavaScriptCore.framework */,
				85D556130ABBF5680DF5F4B4 /* Pods_Pledge.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		832341AE1AAA6A7D00B99B32 /* Libraries */ = {
			isa = PBXGroup;
			children = (
			);
			name = Libraries;
			sourceTree = "<group>";
		};
		83CBB9F61A601CBA00E9B192 = {
			isa = PBXGroup;
			children = (
				13B07FAE1A68108700A75B9A /* Pledge */,
				832341AE1AAA6A7D00B99B32 /* Libraries */,
				83CBBA001A601CBA00E9B192 /* Products */,
				2D16E6871FA4F8E400B85C8A /* Frameworks */,
				D65327D7A22EEC0BE12398D9 /* Pods */,
				D7E4C46ADA2E9064B798F356 /* ExpoModulesProviders */,
			);
			indentWidth = 2;
			sourceTree = "<group>";
			tabWidth = 2;
			usesTabs = 0;
		};
		83CBBA001A601CBA00E9B192 /* Products */ = {
			isa = PBXGroup;
			children = (
				13B07F961A680F5B00A75B9A /* Pledge.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		92DBD88DE9BF7D494EA9DA96 /* Pledge */ = {
			isa = PBXGroup;
			children = (
				FAC715A2D49A985799AEE119 /* ExpoModulesProvider.swift */,
			);
			name = Pledge;
			sourceTree = "<group>";
		};
		BB2F792B24A3F905000567C9 /* Supporting */ = {
			isa = PBXGroup;
			children = (
				BB2F792C24A3F905000567C9 /* Expo.plist */,
			);
			name = Supporting;
			path = Pledge/Supporting;
			sourceTree = "<group>";
		};
		D65327D7A22EEC0BE12398D9 /* Pods */ = {
			isa = PBXGroup;
			children = (
				6C2E3173556A471DD304B334 /* Pods-Pledge.debug.xcconfig */,
				7A4D352CD337FB3A3BF06240 /* Pods-Pledge.release.xcconfig */,
			);
			path = Pods;
			sourceTree = "<group>";
		};
		D7E4C46ADA2E9064B798F356 /* ExpoModulesProviders */ = {
			isa = PBXGroup;
			children = (
				92DBD88DE9BF7D494EA9DA96 /* Pledge */,
			);
			name = ExpoModulesProviders;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		13B07F861A680F5B00A75B9A /* Pledge */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget "Pledge" */;
			buildPhases = (
				08A4A3CD28434E44B6B9DE2E /* [CP] Check Pods Manifest.lock */,
				A3500C977CA2DE9B8E41B51A /* [Expo] Configure project */,
				13B07F871A680F5B00A75B9A /* Sources */,
				13B07F8C1A680F5B00A75B9A /* Frameworks */,
				13B07F8E1A680F5B00A75B9A /* Resources */,
				00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */,
				800E24972A6A228C8D4807E9 /* [CP] Copy Pods Resources */,
				95707CA7364B959C5730FB46 /* [CP] Embed Pods Frameworks */,
				A1EDD6007C0B9525A40CE755 /* [CP-User] [RNFB] Core Configuration */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Pledge;
			productName = Pledge;
			productReference = 13B07F961A680F5B00A75B9A /* Pledge.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		83CBB9F71A601CBA00E9B192 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1130;
				TargetAttributes = {
					13B07F861A680F5B00A75B9A = {
						LastSwiftMigration = 1250;
					};
				};
			};
			buildConfigurationList = 83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject "Pledge" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 83CBB9F61A601CBA00E9B192;
			productRefGroup = 83CBBA001A601CBA00E9B192 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				13B07F861A680F5B00A75B9A /* Pledge */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		13B07F8E1A680F5B00A75B9A /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				BB2F792D24A3F905000567C9 /* Expo.plist in Resources */,
				13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */,
				3E461D99554A48A4959DE609 /* SplashScreen.storyboard in Resources */,
				1AEA617C58C1D546DC9020F4 /* PrivacyInfo.xcprivacy in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Bundle React Native code and images";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n# Source .xcode.env.updates if it exists to allow\n# SKIP_BUNDLING to be unset if needed\nif [[ -f \"$PODS_ROOT/../.xcode.env.updates\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.updates\"\nfi\n# Source local changes to allow overrides\n# if needed\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
		};
		08A4A3CD28434E44B6B9DE2E /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-Pledge-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		800E24972A6A228C8D4807E9 /* [CP] Copy Pods Resources */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Pledge/Pods-Pledge-resources.sh",
				"${PODS_CONFIGURATION_BUILD_DIR}/EXConstants/EXConstants.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/EXConstants/ExpoConstants_privacy.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/ExpoFileSystem/ExpoFileSystem_privacy.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/ExpoLocalization/ExpoLocalization_privacy.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/FirebaseCore/FirebaseCore_Privacy.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/FirebaseCoreInternal/FirebaseCoreInternal_Privacy.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/GoogleUtilities/GoogleUtilities_Privacy.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/RNCAsyncStorage/RNCAsyncStorage_resources.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/React-Core/RCTI18nStrings.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/Stripe/StripeBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripeCore/StripeCoreBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripeFinancialConnections/StripeFinancialConnectionsBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripePaymentSheet/StripePaymentSheetBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripePayments/StripePaymentsBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripePayments/Stripe3DS2.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripePaymentsUI/StripePaymentsUIBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/StripeUICore/StripeUICoreBundle.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/expo-dev-launcher/EXDevLauncher.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/expo-dev-menu/EXDevMenu.bundle",
			);
			name = "[CP] Copy Pods Resources";
			outputPaths = (
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/EXConstants.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoConstants_privacy.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoFileSystem_privacy.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoLocalization_privacy.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/FirebaseCore_Privacy.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/FirebaseCoreInternal_Privacy.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/GoogleUtilities_Privacy.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/RNCAsyncStorage_resources.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/RCTI18nStrings.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripeBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripeCoreBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripeFinancialConnectionsBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripePaymentSheetBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripePaymentsBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/Stripe3DS2.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripePaymentsUIBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/StripeUICoreBundle.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/EXDevLauncher.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/EXDevMenu.bundle",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Pledge/Pods-Pledge-resources.sh\"\n";
			showEnvVarsInLog = 0;
		};
		95707CA7364B959C5730FB46 /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Pledge/Pods-Pledge-frameworks.sh",
				"${PODS_XCFRAMEWORKS_BUILD_DIR}/hermes-engine/Pre-built/hermes.framework/hermes",
			);
			name = "[CP] Embed Pods Frameworks";
			outputPaths = (
				"${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}/hermes.framework",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Pledge/Pods-Pledge-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
		A1EDD6007C0B9525A40CE755 /* [CP-User] [RNFB] Core Configuration */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)",
			);
			name = "[CP-User] [RNFB] Core Configuration";
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "#!/usr/bin/env bash\n#\n# Copyright (c) 2016-present Invertase Limited & Contributors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this library except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##########################################################################\n##########################################################################\n#\n#  NOTE THAT IF YOU CHANGE THIS FILE YOU MUST RUN pod install AFTERWARDS\n#\n#  This file is installed as an Xcode build script in the project file\n#  by cocoapods, and you will not see your changes until you pod install\n#\n##########################################################################\n##########################################################################\n\nset -e\n\n_MAX_LOOKUPS=2;\n_SEARCH_RESULT=''\n_RN_ROOT_EXISTS=''\n_CURRENT_LOOKUPS=1\n_JSON_ROOT=\"'react-native'\"\n_JSON_FILE_NAME='firebase.json'\n_JSON_OUTPUT_BASE64='e30=' # { }\n_CURRENT_SEARCH_DIR=${PROJECT_DIR}\n_PLIST_BUDDY=/usr/libexec/PlistBuddy\n_TARGET_PLIST=\"${BUILT_PRODUCTS_DIR}/${INFOPLIST_PATH}\"\n_DSYM_PLIST=\"${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Info.plist\"\n\n# plist arrays\n_PLIST_ENTRY_KEYS=()\n_PLIST_ENTRY_TYPES=()\n_PLIST_ENTRY_VALUES=()\n\nfunction setPlistValue {\n  echo \"info:      setting plist entry '$1' of type '$2' in file '$4'\"\n  ${_PLIST_BUDDY} -c \"Add :$1 $2 '$3'\" $4 || echo \"info:      '$1' already exists\"\n}\n\nfunction getFirebaseJsonKeyValue () {\n  if [[ ${_RN_ROOT_EXISTS} ]]; then\n    ruby -Ku -e \"require 'rubygems';require 'json'; output=JSON.parse('$1'); puts output[$_JSON_ROOT]['$2']\"\n  else\n    echo \"\"\n  fi;\n}\n\nfunction jsonBoolToYesNo () {\n  if [[ $1 == \"false\" ]]; then\n    echo \"NO\"\n  elif [[ $1 == \"true\" ]]; then\n    echo \"YES\"\n  else echo \"NO\"\n  fi\n}\n\necho \"info: -> RNFB build script started\"\necho \"info: 1) Locating ${_JSON_FILE_NAME} file:\"\n\nif [[ -z ${_CURRENT_SEARCH_DIR} ]]; then\n  _CURRENT_SEARCH_DIR=$(pwd)\nfi;\n\nwhile true; do\n  _CURRENT_SEARCH_DIR=$(dirname \"$_CURRENT_SEARCH_DIR\")\n  if [[ \"$_CURRENT_SEARCH_DIR\" == \"/\" ]] || [[ ${_CURRENT_LOOKUPS} -gt ${_MAX_LOOKUPS} ]]; then break; fi;\n  echo \"info:      ($_CURRENT_LOOKUPS of $_MAX_LOOKUPS) Searching in '$_CURRENT_SEARCH_DIR' for a ${_JSON_FILE_NAME} file.\"\n  _SEARCH_RESULT=$(find \"$_CURRENT_SEARCH_DIR\" -maxdepth 2 -name ${_JSON_FILE_NAME} -print | /usr/bin/head -n 1)\n  if [[ ${_SEARCH_RESULT} ]]; then\n    echo \"info:      ${_JSON_FILE_NAME} found at $_SEARCH_RESULT\"\n    break;\n  fi;\n  _CURRENT_LOOKUPS=$((_CURRENT_LOOKUPS+1))\ndone\n\nif [[ ${_SEARCH_RESULT} ]]; then\n  _JSON_OUTPUT_RAW=$(cat \"${_SEARCH_RESULT}\")\n  _RN_ROOT_EXISTS=$(ruby -Ku -e \"require 'rubygems';require 'json'; output=JSON.parse('$_JSON_OUTPUT_RAW'); puts output[$_JSON_ROOT]\" || echo '')\n\n  if [[ ${_RN_ROOT_EXISTS} ]]; then\n    if ! python3 --version >/dev/null 2>&1; then echo \"python3 not found, firebase.json file processing error.\" && exit 1; fi\n    _JSON_OUTPUT_BASE64=$(python3 -c 'import json,sys,base64;print(base64.b64encode(bytes(json.dumps(json.loads(open('\"'${_SEARCH_RESULT}'\"', '\"'rb'\"').read())['${_JSON_ROOT}']), '\"'utf-8'\"')).decode())' || echo \"e30=\")\n  fi\n\n  _PLIST_ENTRY_KEYS+=(\"firebase_json_raw\")\n  _PLIST_ENTRY_TYPES+=(\"string\")\n  _PLIST_ENTRY_VALUES+=(\"$_JSON_OUTPUT_BASE64\")\n\n  # config.app_data_collection_default_enabled\n  _APP_DATA_COLLECTION_ENABLED=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"app_data_collection_default_enabled\")\n  if [[ $_APP_DATA_COLLECTION_ENABLED ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FirebaseDataCollectionDefaultEnabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_APP_DATA_COLLECTION_ENABLED\")\")\n  fi\n\n  # config.analytics_auto_collection_enabled\n  _ANALYTICS_AUTO_COLLECTION=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_auto_collection_enabled\")\n  if [[ $_ANALYTICS_AUTO_COLLECTION ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FIREBASE_ANALYTICS_COLLECTION_ENABLED\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_AUTO_COLLECTION\")\")\n  fi\n\n  # config.analytics_collection_deactivated\n  _ANALYTICS_DEACTIVATED=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_collection_deactivated\")\n  if [[ $_ANALYTICS_DEACTIVATED ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FIREBASE_ANALYTICS_COLLECTION_DEACTIVATED\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_DEACTIVATED\")\")\n  fi\n\n  # config.analytics_idfv_collection_enabled\n  _ANALYTICS_IDFV_COLLECTION=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_idfv_collection_enabled\")\n  if [[ $_ANALYTICS_IDFV_COLLECTION ]]; then\n    _PLIST_ENTRY_KEYS+=(\"GOOGLE_ANALYTICS_IDFV_COLLECTION_ENABLED\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_IDFV_COLLECTION\")\")\n  fi\n\n  # config.analytics_default_allow_analytics_storage\n  _ANALYTICS_STORAGE=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_default_allow_analytics_storage\")\n  if [[ $_ANALYTICS_STORAGE ]]; then\n    _PLIST_ENTRY_KEYS+=(\"GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_STORAGE\")\")\n  fi\n\n  # config.analytics_default_allow_ad_storage\n  _ANALYTICS_AD_STORAGE=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_default_allow_ad_storage\")\n  if [[ $_ANALYTICS_AD_STORAGE ]]; then\n    _PLIST_ENTRY_KEYS+=(\"GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_AD_STORAGE\")\")\n  fi\n\n  # config.analytics_default_allow_ad_user_data\n  _ANALYTICS_AD_USER_DATA=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_default_allow_ad_user_data\")\n  if [[ $_ANALYTICS_AD_USER_DATA ]]; then\n    _PLIST_ENTRY_KEYS+=(\"GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_AD_USER_DATA\")\")\n  fi\n\n  # config.analytics_default_allow_ad_personalization_signals\n  _ANALYTICS_PERSONALIZATION=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"analytics_default_allow_ad_personalization_signals\")\n  if [[ $_ANALYTICS_PERSONALIZATION ]]; then\n    _PLIST_ENTRY_KEYS+=(\"GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_PERSONALIZATION\")\")\n  fi\n\n  # config.analytics_registration_with_ad_network_enabled\n  _ANALYTICS_REGISTRATION_WITH_AD_NETWORK=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"google_analytics_registration_with_ad_network_enabled\")\n  if [[ $_ANALYTICS_REGISTRATION_WITH_AD_NETWORK ]]; then\n    _PLIST_ENTRY_KEYS+=(\"GOOGLE_ANALYTICS_REGISTRATION_WITH_AD_NETWORK_ENABLED\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_REGISTRATION_WITH_AD_NETWORK\")\")\n  fi\n\n  # config.google_analytics_automatic_screen_reporting_enabled\n  _ANALYTICS_AUTO_SCREEN_REPORTING=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"google_analytics_automatic_screen_reporting_enabled\")\n  if [[ $_ANALYTICS_AUTO_SCREEN_REPORTING ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FirebaseAutomaticScreenReportingEnabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_ANALYTICS_AUTO_SCREEN_REPORTING\")\")\n  fi\n\n  # config.perf_auto_collection_enabled\n  _PERF_AUTO_COLLECTION=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"perf_auto_collection_enabled\")\n  if [[ $_PERF_AUTO_COLLECTION ]]; then\n    _PLIST_ENTRY_KEYS+=(\"firebase_performance_collection_enabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_PERF_AUTO_COLLECTION\")\")\n  fi\n\n  # config.perf_collection_deactivated\n  _PERF_DEACTIVATED=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"perf_collection_deactivated\")\n  if [[ $_PERF_DEACTIVATED ]]; then\n    _PLIST_ENTRY_KEYS+=(\"firebase_performance_collection_deactivated\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_PERF_DEACTIVATED\")\")\n  fi\n\n  # config.messaging_auto_init_enabled\n  _MESSAGING_AUTO_INIT=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"messaging_auto_init_enabled\")\n  if [[ $_MESSAGING_AUTO_INIT ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FirebaseMessagingAutoInitEnabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_MESSAGING_AUTO_INIT\")\")\n  fi\n\n  # config.in_app_messaging_auto_colllection_enabled\n  _FIAM_AUTO_INIT=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"in_app_messaging_auto_collection_enabled\")\n  if [[ $_FIAM_AUTO_INIT ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FirebaseInAppMessagingAutomaticDataCollectionEnabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_FIAM_AUTO_INIT\")\")\n  fi\n\n  # config.app_check_token_auto_refresh\n  _APP_CHECK_TOKEN_AUTO_REFRESH=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"app_check_token_auto_refresh\")\n  if [[ $_APP_CHECK_TOKEN_AUTO_REFRESH ]]; then\n    _PLIST_ENTRY_KEYS+=(\"FirebaseAppCheckTokenAutoRefreshEnabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"$(jsonBoolToYesNo \"$_APP_CHECK_TOKEN_AUTO_REFRESH\")\")\n  fi\n\n  # config.crashlytics_disable_auto_disabler - undocumented for now - mainly for debugging, document if becomes useful\n  _CRASHLYTICS_AUTO_DISABLE_ENABLED=$(getFirebaseJsonKeyValue \"$_JSON_OUTPUT_RAW\" \"crashlytics_disable_auto_disabler\")\n  if [[ $_CRASHLYTICS_AUTO_DISABLE_ENABLED == \"true\" ]]; then\n    echo \"Disabled Crashlytics auto disabler.\" # do nothing\n  else\n    _PLIST_ENTRY_KEYS+=(\"FirebaseCrashlyticsCollectionEnabled\")\n    _PLIST_ENTRY_TYPES+=(\"bool\")\n    _PLIST_ENTRY_VALUES+=(\"NO\")\n  fi\nelse\n  _PLIST_ENTRY_KEYS+=(\"firebase_json_raw\")\n  _PLIST_ENTRY_TYPES+=(\"string\")\n  _PLIST_ENTRY_VALUES+=(\"$_JSON_OUTPUT_BASE64\")\n  echo \"warning:   A firebase.json file was not found, whilst this file is optional it is recommended to include it to configure firebase services in React Native Firebase.\"\nfi;\n\necho \"info: 2) Injecting Info.plist entries: \"\n\n# Log out the keys we're adding\nfor i in \"${!_PLIST_ENTRY_KEYS[@]}\"; do\n  echo \"    ->  $i) ${_PLIST_ENTRY_KEYS[$i]}\" \"${_PLIST_ENTRY_TYPES[$i]}\" \"${_PLIST_ENTRY_VALUES[$i]}\"\ndone\n\nfor plist in \"${_TARGET_PLIST}\" \"${_DSYM_PLIST}\" ; do\n  if [[ -f \"${plist}\" ]]; then\n\n    # paths with spaces break the call to setPlistValue. temporarily modify\n    # the shell internal field separator variable (IFS), which normally\n    # includes spaces, to consist only of line breaks\n    oldifs=$IFS\n    IFS=\"\n\"\n\n    for i in \"${!_PLIST_ENTRY_KEYS[@]}\"; do\n      setPlistValue \"${_PLIST_ENTRY_KEYS[$i]}\" \"${_PLIST_ENTRY_TYPES[$i]}\" \"${_PLIST_ENTRY_VALUES[$i]}\" \"${plist}\"\n    done\n\n    # restore the original internal field separator value\n    IFS=$oldifs\n  else\n    echo \"warning:   A Info.plist build output file was not found (${plist})\"\n  fi\ndone\n\necho \"info: <- RNFB build script finished\"\n";
		};
		A3500C977CA2DE9B8E41B51A /* [Expo] Configure project */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			name = "[Expo] Configure project";
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "# This script configures Expo modules and generates the modules provider file.\nbash -l -c \"./Pods/Target\\ Support\\ Files/Pods-Pledge/expo-configure-project.sh\"\n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		13B07F871A680F5B00A75B9A /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				13B07FBC1A68108700A75B9A /* AppDelegate.mm in Sources */,
				13B07FC11A68108700A75B9A /* main.m in Sources */,
				B18059E884C0ABDD17F3DC3D /* ExpoModulesProvider.swift in Sources */,
				2FBE32FDF0674CA9AA9E2296 /* noop-file.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		13B07F941A680F5B00A75B9A /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 6C2E3173556A471DD304B334 /* Pods-Pledge.debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Pledge/PledgeDebug.entitlements;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = GC2XRZ6HSJ;
				ENABLE_BITCODE = NO;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"$(inherited)",
					"FB_SONARKIT_ENABLED=1",
				);
				INFOPLIST_FILE = Pledge/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 13.4;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-ObjC",
					"-lc++",
				);
				OTHER_SWIFT_FLAGS = "$(inherited) -D EXPO_CONFIGURATION_DEBUG";
				PRODUCT_BUNDLE_IDENTIFIER = com.pledgeincc.pledge;
				PRODUCT_NAME = Pledge;
				SWIFT_OBJC_BRIDGING_HEADER = "Pledge/Pledge-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = 1;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		13B07F951A680F5B00A75B9A /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7A4D352CD337FB3A3BF06240 /* Pods-Pledge.release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Pledge/Pledge.entitlements;
				CURRENT_PROJECT_VERSION = 1;
				INFOPLIST_FILE = Pledge/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 13.4;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-ObjC",
					"-lc++",
				);
				OTHER_SWIFT_FLAGS = "$(inherited) -D EXPO_CONFIGURATION_RELEASE";
				PRODUCT_BUNDLE_IDENTIFIER = com.pledgeinc.pledge;
				PRODUCT_NAME = Pledge;
				SWIFT_OBJC_BRIDGING_HEADER = "Pledge/Pledge-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = 1;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
		83CBBA201A601CBA00E9B192 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CC = "";
				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				CXX = "";
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon/ReactCommon.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon/ReactCommon.framework/Headers/react/nativemodule/core",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon-Samples/ReactCommon_Samples.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon-Samples/ReactCommon_Samples.framework/Headers/platform/ios",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-Fabric/React_Fabric.framework/Headers/react/renderer/components/view/platform/cxx",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-NativeModulesApple/React_NativeModulesApple.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-graphics/React_graphics.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-graphics/React_graphics.framework/Headers/react/renderer/graphics/platform/ios",
				);
				IPHONEOS_DEPLOYMENT_TARGET = 13.4;
				LD = "";
				LDPLUSPLUS = "";
				LD_RUNPATH_SEARCH_PATHS = (
					/usr/lib/swift,
					"$(inherited)",
				);
				LIBRARY_SEARCH_PATHS = "$(SDKROOT)/usr/lib/swift\"$(inherited)\"";
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				OTHER_LDFLAGS = (
					"$(inherited)",
					" ",
				);
				REACT_NATIVE_PATH = "${PODS_ROOT}/../../node_modules/react-native";
				SDKROOT = iphoneos;
				USE_HERMES = true;
			};
			name = Debug;
		};
		83CBBA211A601CBA00E9B192 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CC = "";
				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = YES;
				CXX = "";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon/ReactCommon.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon/ReactCommon.framework/Headers/react/nativemodule/core",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon-Samples/ReactCommon_Samples.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/ReactCommon-Samples/ReactCommon_Samples.framework/Headers/platform/ios",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-Fabric/React_Fabric.framework/Headers/react/renderer/components/view/platform/cxx",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-NativeModulesApple/React_NativeModulesApple.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-graphics/React_graphics.framework/Headers",
					"${PODS_CONFIGURATION_BUILD_DIR}/React-graphics/React_graphics.framework/Headers/react/renderer/graphics/platform/ios",
				);
				IPHONEOS_DEPLOYMENT_TARGET = 13.4;
				LD = "";
				LDPLUSPLUS = "";
				LD_RUNPATH_SEARCH_PATHS = (
					/usr/lib/swift,
					"$(inherited)",
				);
				LIBRARY_SEARCH_PATHS = "$(SDKROOT)/usr/lib/swift\"$(inherited)\"";
				MTL_ENABLE_DEBUG_INFO = NO;
				OTHER_LDFLAGS = (
					"$(inherited)",
					" ",
				);
				REACT_NATIVE_PATH = "${PODS_ROOT}/../../node_modules/react-native";
				SDKROOT = iphoneos;
				USE_HERMES = true;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget "Pledge" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				13B07F941A680F5B00A75B9A /* Debug */,
				13B07F951A680F5B00A75B9A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject "Pledge" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				83CBBA201A601CBA00E9B192 /* Debug */,
				83CBBA211A601CBA00E9B192 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 83CBB9F71A601CBA00E9B192 /* Project object */;
}

================
File: ios/Pledge.xcworkspace/contents.xcworkspacedata
================
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Pledge.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>

================
File: ios/.gitignore
================
# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
project.xcworkspace
.xcode.env.local

# Bundle artifacts
*.jsbundle

# CocoaPods
/Pods/

================
File: ios/.xcode.env
================
# This `.xcode.env` file is versioned and is used to source the environment
# used when running script phases inside Xcode.
# To customize your local environment, you can create an `.xcode.env.local`
# file that is not versioned.

# NODE_BINARY variable contains the PATH to the node executable.
#
# Customize the NODE_BINARY variable here.
# For example, to use nvm with brew, add the following line
# . "$(brew --prefix nvm)/nvm.sh" --no-use
export NODE_BINARY=$(command -v node)

================
File: ios/com.apple.developer.family-controls entitlement
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>com.apple.developer.family-controls</key>
    <true/>
  </dict>
</plist>

================
File: ios/Pledge.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>com.apple.developer.family-controls</key>
    <true/>
  </dict>
</plist>

================
File: ios/Podfile
================
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

use_autolinking_method_symbol = ('use' + '_native' + '_modules!').to_sym
origin_autolinking_method = self.method(use_autolinking_method_symbol)
self.define_singleton_method(use_autolinking_method_symbol) do |*args|
  if ENV['EXPO_UNSTABLE_CORE_AUTOLINKING'] == '1'
    Pod::UI.puts('Using expo-modules-autolinking as core autolinking source'.green)
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
    origin_autolinking_method.call(config_command)
  else
    origin_autolinking_method.call()
  end
end

platform :ios, podfile_properties['ios.deploymentTarget'] || '13.4'
use_modular_headers!  # This line enables modular headers globally

install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'Pledge' do
  use_expo_modules!
  config = use_native_modules!

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']
  use_frameworks! :linkage => :static


  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  # Specify modular headers for specific dependencies
  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  # Prevent multiple definitions of ReactCommon
  pod 'ReactCommon', :path => "../node_modules/react-native/ReactCommon"

  pod 'Stripe', '~> 23.30.0'
  pod 'StripePayments', '~> 23.30.0'
  pod 'StripeApplePay', '~> 23.30.0'


  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end

================
File: ios/Podfile.lock
================
PODS:
  - boost (1.83.0)
  - DoubleConversion (1.1.6)
  - EXConstants (16.0.2):
    - ExpoModulesCore
  - EXJSONUtils (0.13.1)
  - EXManifests (0.14.3):
    - ExpoModulesCore
  - Expo (51.0.38):
    - ExpoModulesCore
  - expo-dev-client (4.0.29):
    - EXManifests
    - expo-dev-launcher
    - expo-dev-menu
    - expo-dev-menu-interface
    - EXUpdatesInterface
  - expo-dev-launcher (4.0.29):
    - DoubleConversion
    - EXManifests
    - expo-dev-launcher/Main (= 4.0.29)
    - expo-dev-menu
    - expo-dev-menu-interface
    - ExpoModulesCore
    - EXUpdatesInterface
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTAppDelegate
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-launcher/Main (4.0.29):
    - DoubleConversion
    - EXManifests
    - expo-dev-launcher/Unsafe
    - expo-dev-menu
    - expo-dev-menu-interface
    - ExpoModulesCore
    - EXUpdatesInterface
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTAppDelegate
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-launcher/Unsafe (4.0.29):
    - DoubleConversion
    - EXManifests
    - expo-dev-menu
    - expo-dev-menu-interface
    - ExpoModulesCore
    - EXUpdatesInterface
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTAppDelegate
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-menu (5.0.23):
    - DoubleConversion
    - expo-dev-menu/Main (= 5.0.23)
    - expo-dev-menu/ReactNativeCompatibles (= 5.0.23)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-menu-interface (1.8.4)
  - expo-dev-menu/Main (5.0.23):
    - DoubleConversion
    - EXManifests
    - expo-dev-menu-interface
    - expo-dev-menu/Vendored
    - ExpoModulesCore
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-menu/ReactNativeCompatibles (5.0.23):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-menu/SafeAreaView (5.0.23):
    - DoubleConversion
    - ExpoModulesCore
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - expo-dev-menu/Vendored (5.0.23):
    - DoubleConversion
    - expo-dev-menu/SafeAreaView
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - ExpoAsset (10.0.10):
    - ExpoModulesCore
  - ExpoFileSystem (17.0.1):
    - ExpoModulesCore
  - ExpoFont (12.0.10):
    - ExpoModulesCore
  - ExpoKeepAwake (13.0.2):
    - ExpoModulesCore
  - ExpoLocalization (15.0.3):
    - ExpoModulesCore
  - ExpoModulesCore (1.12.26):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTAppDelegate
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - EXSplashScreen (0.27.6):
    - DoubleConversion
    - ExpoModulesCore
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - EXUpdatesInterface (0.16.2):
    - ExpoModulesCore
  - FBLazyVector (0.74.5)
  - Firebase/CoreOnly (11.4.0):
    - FirebaseCore (= 11.4.0)
  - FirebaseCore (11.4.0):
    - FirebaseCoreInternal (~> 11.0)
    - GoogleUtilities/Environment (~> 8.0)
    - GoogleUtilities/Logger (~> 8.0)
  - FirebaseCoreInternal (11.5.0):
    - "GoogleUtilities/NSData+zlib (~> 8.0)"
  - fmt (9.1.0)
  - glog (0.3.5)
  - GoogleUtilities (8.0.2):
    - GoogleUtilities/AppDelegateSwizzler (= 8.0.2)
    - GoogleUtilities/Environment (= 8.0.2)
    - GoogleUtilities/Logger (= 8.0.2)
    - GoogleUtilities/MethodSwizzler (= 8.0.2)
    - GoogleUtilities/Network (= 8.0.2)
    - "GoogleUtilities/NSData+zlib (= 8.0.2)"
    - GoogleUtilities/Privacy (= 8.0.2)
    - GoogleUtilities/Reachability (= 8.0.2)
    - GoogleUtilities/SwizzlerTestHelpers (= 8.0.2)
    - GoogleUtilities/UserDefaults (= 8.0.2)
  - GoogleUtilities/AppDelegateSwizzler (8.0.2):
    - GoogleUtilities/Environment
    - GoogleUtilities/Logger
    - GoogleUtilities/Network
    - GoogleUtilities/Privacy
  - GoogleUtilities/Environment (8.0.2):
    - GoogleUtilities/Privacy
  - GoogleUtilities/Logger (8.0.2):
    - GoogleUtilities/Environment
    - GoogleUtilities/Privacy
  - GoogleUtilities/MethodSwizzler (8.0.2):
    - GoogleUtilities/Logger
    - GoogleUtilities/Privacy
  - GoogleUtilities/Network (8.0.2):
    - GoogleUtilities/Logger
    - "GoogleUtilities/NSData+zlib"
    - GoogleUtilities/Privacy
    - GoogleUtilities/Reachability
  - "GoogleUtilities/NSData+zlib (8.0.2)":
    - GoogleUtilities/Privacy
  - GoogleUtilities/Privacy (8.0.2)
  - GoogleUtilities/Reachability (8.0.2):
    - GoogleUtilities/Logger
    - GoogleUtilities/Privacy
  - GoogleUtilities/SwizzlerTestHelpers (8.0.2):
    - GoogleUtilities/MethodSwizzler
  - GoogleUtilities/UserDefaults (8.0.2):
    - GoogleUtilities/Logger
    - GoogleUtilities/Privacy
  - hermes-engine (0.74.5):
    - hermes-engine/Pre-built (= 0.74.5)
  - hermes-engine/Pre-built (0.74.5)
  - RCT-Folly (2024.01.01.00):
    - boost
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - RCT-Folly/Default (= 2024.01.01.00)
  - RCT-Folly/Default (2024.01.01.00):
    - boost
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
  - RCT-Folly/Fabric (2024.01.01.00):
    - boost
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
  - RCTDeprecation (0.74.5)
  - RCTRequired (0.74.5)
  - RCTTypeSafety (0.74.5):
    - FBLazyVector (= 0.74.5)
    - RCTRequired (= 0.74.5)
    - React-Core (= 0.74.5)
  - React (0.74.5):
    - React-Core (= 0.74.5)
    - React-Core/DevSupport (= 0.74.5)
    - React-Core/RCTWebSocket (= 0.74.5)
    - React-RCTActionSheet (= 0.74.5)
    - React-RCTAnimation (= 0.74.5)
    - React-RCTBlob (= 0.74.5)
    - React-RCTImage (= 0.74.5)
    - React-RCTLinking (= 0.74.5)
    - React-RCTNetwork (= 0.74.5)
    - React-RCTSettings (= 0.74.5)
    - React-RCTText (= 0.74.5)
    - React-RCTVibration (= 0.74.5)
  - React-callinvoker (0.74.5)
  - React-Codegen (0.74.5):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-debug
    - React-Fabric
    - React-FabricImage
    - React-featureflags
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-NativeModulesApple
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
  - React-Core (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default (= 0.74.5)
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/CoreModulesHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/Default (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/DevSupport (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default (= 0.74.5)
    - React-Core/RCTWebSocket (= 0.74.5)
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTActionSheetHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTAnimationHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTBlobHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTImageHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTLinkingHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTNetworkHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTSettingsHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTTextHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTVibrationHeaders (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-Core/RCTWebSocket (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTDeprecation
    - React-Core/Default (= 0.74.5)
    - React-cxxreact
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-perflogger
    - React-runtimescheduler
    - React-utils
    - SocketRocket (= 0.7.0)
    - Yoga
  - React-CoreModules (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - RCT-Folly (= 2024.01.01.00)
    - RCTTypeSafety (= 0.74.5)
    - React-Codegen
    - React-Core/CoreModulesHeaders (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTBlob
    - React-RCTImage (= 0.74.5)
    - ReactCommon
    - SocketRocket (= 0.7.0)
  - React-cxxreact (0.74.5):
    - boost (= 1.83.0)
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-callinvoker (= 0.74.5)
    - React-debug (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-jsinspector
    - React-logger (= 0.74.5)
    - React-perflogger (= 0.74.5)
    - React-runtimeexecutor (= 0.74.5)
  - React-debug (0.74.5)
  - React-Fabric (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-Fabric/animations (= 0.74.5)
    - React-Fabric/attributedstring (= 0.74.5)
    - React-Fabric/componentregistry (= 0.74.5)
    - React-Fabric/componentregistrynative (= 0.74.5)
    - React-Fabric/components (= 0.74.5)
    - React-Fabric/core (= 0.74.5)
    - React-Fabric/imagemanager (= 0.74.5)
    - React-Fabric/leakchecker (= 0.74.5)
    - React-Fabric/mounting (= 0.74.5)
    - React-Fabric/scheduler (= 0.74.5)
    - React-Fabric/telemetry (= 0.74.5)
    - React-Fabric/templateprocessor (= 0.74.5)
    - React-Fabric/textlayoutmanager (= 0.74.5)
    - React-Fabric/uimanager (= 0.74.5)
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/animations (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/attributedstring (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/componentregistry (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/componentregistrynative (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-Fabric/components/inputaccessory (= 0.74.5)
    - React-Fabric/components/legacyviewmanagerinterop (= 0.74.5)
    - React-Fabric/components/modal (= 0.74.5)
    - React-Fabric/components/rncore (= 0.74.5)
    - React-Fabric/components/root (= 0.74.5)
    - React-Fabric/components/safeareaview (= 0.74.5)
    - React-Fabric/components/scrollview (= 0.74.5)
    - React-Fabric/components/text (= 0.74.5)
    - React-Fabric/components/textinput (= 0.74.5)
    - React-Fabric/components/unimplementedview (= 0.74.5)
    - React-Fabric/components/view (= 0.74.5)
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/inputaccessory (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/legacyviewmanagerinterop (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/modal (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/rncore (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/root (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/safeareaview (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/scrollview (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/text (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/textinput (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/unimplementedview (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/components/view (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
    - Yoga
  - React-Fabric/core (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/imagemanager (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/leakchecker (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/mounting (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/scheduler (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/telemetry (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/templateprocessor (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/textlayoutmanager (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-Fabric/uimanager
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-Fabric/uimanager (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Core
    - React-cxxreact
    - React-debug
    - React-graphics
    - React-jsi
    - React-jsiexecutor
    - React-logger
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - ReactCommon/turbomodule/core
  - React-FabricImage (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - RCTRequired (= 0.74.5)
    - RCTTypeSafety (= 0.74.5)
    - React-Fabric
    - React-graphics
    - React-ImageManager
    - React-jsi
    - React-jsiexecutor (= 0.74.5)
    - React-logger
    - React-rendererdebug
    - React-utils
    - ReactCommon
    - Yoga
  - React-featureflags (0.74.5)
  - React-graphics (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - React-Core/Default (= 0.74.5)
    - React-utils
  - React-hermes (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-cxxreact (= 0.74.5)
    - React-jsi
    - React-jsiexecutor (= 0.74.5)
    - React-jsinspector
    - React-perflogger (= 0.74.5)
    - React-runtimeexecutor
  - React-ImageManager (0.74.5):
    - glog
    - RCT-Folly/Fabric
    - React-Core/Default
    - React-debug
    - React-Fabric
    - React-graphics
    - React-rendererdebug
    - React-utils
  - React-jserrorhandler (0.74.5):
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - React-debug
    - React-jsi
    - React-Mapbuffer
  - React-jsi (0.74.5):
    - boost (= 1.83.0)
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
  - React-jsiexecutor (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-cxxreact (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-jsinspector
    - React-perflogger (= 0.74.5)
  - React-jsinspector (0.74.5):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-featureflags
    - React-jsi
    - React-runtimeexecutor (= 0.74.5)
  - React-jsitracing (0.74.5):
    - React-jsi
  - React-logger (0.74.5):
    - glog
  - React-Mapbuffer (0.74.5):
    - glog
    - React-debug
  - react-native-safe-area-context (4.10.5):
    - React-Core
  - React-nativeconfig (0.74.5)
  - React-NativeModulesApple (0.74.5):
    - glog
    - hermes-engine
    - React-callinvoker
    - React-Core
    - React-cxxreact
    - React-jsi
    - React-jsinspector
    - React-runtimeexecutor
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
  - React-perflogger (0.74.5)
  - React-RCTActionSheet (0.74.5):
    - React-Core/RCTActionSheetHeaders (= 0.74.5)
  - React-RCTAnimation (0.74.5):
    - RCT-Folly (= 2024.01.01.00)
    - RCTTypeSafety
    - React-Codegen
    - React-Core/RCTAnimationHeaders
    - React-jsi
    - React-NativeModulesApple
    - ReactCommon
  - React-RCTAppDelegate (0.74.5):
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-CoreModules
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-hermes
    - React-nativeconfig
    - React-NativeModulesApple
    - React-RCTFabric
    - React-RCTImage
    - React-RCTNetwork
    - React-rendererdebug
    - React-RuntimeApple
    - React-RuntimeCore
    - React-RuntimeHermes
    - React-runtimescheduler
    - React-utils
    - ReactCommon
  - React-RCTBlob (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-Codegen
    - React-Core/RCTBlobHeaders
    - React-Core/RCTWebSocket
    - React-jsi
    - React-jsinspector
    - React-NativeModulesApple
    - React-RCTNetwork
    - ReactCommon
  - React-RCTFabric (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - React-Core
    - React-debug
    - React-Fabric
    - React-FabricImage
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-jsi
    - React-jsinspector
    - React-nativeconfig
    - React-RCTImage
    - React-RCTText
    - React-rendererdebug
    - React-runtimescheduler
    - React-utils
    - Yoga
  - React-RCTImage (0.74.5):
    - RCT-Folly (= 2024.01.01.00)
    - RCTTypeSafety
    - React-Codegen
    - React-Core/RCTImageHeaders
    - React-jsi
    - React-NativeModulesApple
    - React-RCTNetwork
    - ReactCommon
  - React-RCTLinking (0.74.5):
    - React-Codegen
    - React-Core/RCTLinkingHeaders (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-NativeModulesApple
    - ReactCommon
    - ReactCommon/turbomodule/core (= 0.74.5)
  - React-RCTNetwork (0.74.5):
    - RCT-Folly (= 2024.01.01.00)
    - RCTTypeSafety
    - React-Codegen
    - React-Core/RCTNetworkHeaders
    - React-jsi
    - React-NativeModulesApple
    - ReactCommon
  - React-RCTSettings (0.74.5):
    - RCT-Folly (= 2024.01.01.00)
    - RCTTypeSafety
    - React-Codegen
    - React-Core/RCTSettingsHeaders
    - React-jsi
    - React-NativeModulesApple
    - ReactCommon
  - React-RCTText (0.74.5):
    - React-Core/RCTTextHeaders (= 0.74.5)
    - Yoga
  - React-RCTVibration (0.74.5):
    - RCT-Folly (= 2024.01.01.00)
    - React-Codegen
    - React-Core/RCTVibrationHeaders
    - React-jsi
    - React-NativeModulesApple
    - ReactCommon
  - React-rendererdebug (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - RCT-Folly (= 2024.01.01.00)
    - React-debug
  - React-rncore (0.74.5)
  - React-RuntimeApple (0.74.5):
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - React-callinvoker
    - React-Core/Default
    - React-CoreModules
    - React-cxxreact
    - React-jserrorhandler
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-Mapbuffer
    - React-NativeModulesApple
    - React-RCTFabric
    - React-RuntimeCore
    - React-runtimeexecutor
    - React-RuntimeHermes
    - React-utils
  - React-RuntimeCore (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - React-cxxreact
    - React-featureflags
    - React-jserrorhandler
    - React-jsi
    - React-jsiexecutor
    - React-jsinspector
    - React-runtimeexecutor
    - React-runtimescheduler
    - React-utils
  - React-runtimeexecutor (0.74.5):
    - React-jsi (= 0.74.5)
  - React-RuntimeHermes (0.74.5):
    - hermes-engine
    - RCT-Folly/Fabric (= 2024.01.01.00)
    - React-featureflags
    - React-hermes
    - React-jsi
    - React-jsinspector
    - React-jsitracing
    - React-nativeconfig
    - React-RuntimeCore
    - React-utils
  - React-runtimescheduler (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-callinvoker
    - React-cxxreact
    - React-debug
    - React-featureflags
    - React-jsi
    - React-rendererdebug
    - React-runtimeexecutor
    - React-utils
  - React-utils (0.74.5):
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-debug
    - React-jsi (= 0.74.5)
  - ReactCommon (0.74.5):
    - ReactCommon/turbomodule (= 0.74.5)
  - ReactCommon/turbomodule (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-callinvoker (= 0.74.5)
    - React-cxxreact (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-logger (= 0.74.5)
    - React-perflogger (= 0.74.5)
    - ReactCommon/turbomodule/bridging (= 0.74.5)
    - ReactCommon/turbomodule/core (= 0.74.5)
  - ReactCommon/turbomodule/bridging (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-callinvoker (= 0.74.5)
    - React-cxxreact (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-logger (= 0.74.5)
    - React-perflogger (= 0.74.5)
  - ReactCommon/turbomodule/core (0.74.5):
    - DoubleConversion
    - fmt (= 9.1.0)
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - React-callinvoker (= 0.74.5)
    - React-cxxreact (= 0.74.5)
    - React-debug (= 0.74.5)
    - React-jsi (= 0.74.5)
    - React-logger (= 0.74.5)
    - React-perflogger (= 0.74.5)
    - React-utils (= 0.74.5)
  - RNCAsyncStorage (1.23.1):
    - React-Core
  - RNFBApp (21.3.0):
    - Firebase/CoreOnly (<= 11.4.0)
    - React-Core
  - RNGestureHandler (2.16.2):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - RNReanimated (3.10.1):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - RNScreens (3.31.1):
    - DoubleConversion
    - glog
    - hermes-engine
    - RCT-Folly (= 2024.01.01.00)
    - RCTRequired
    - RCTTypeSafety
    - React-Codegen
    - React-Core
    - React-debug
    - React-Fabric
    - React-featureflags
    - React-graphics
    - React-ImageManager
    - React-NativeModulesApple
    - React-RCTFabric
    - React-RCTImage
    - React-rendererdebug
    - React-utils
    - ReactCommon/turbomodule/bridging
    - ReactCommon/turbomodule/core
    - Yoga
  - RNSVG (15.2.0):
    - React-Core
  - SocketRocket (0.7.0)
  - Stripe (23.30.0):
    - StripeApplePay (= 23.30.0)
    - StripeCore (= 23.30.0)
    - StripePayments (= 23.30.0)
    - StripePaymentsUI (= 23.30.0)
    - StripeUICore (= 23.30.0)
  - stripe-react-native (0.39.0):
    - React-Core
    - Stripe (~> 23.30.0)
    - StripeApplePay (~> 23.30.0)
    - StripeFinancialConnections (~> 23.30.0)
    - StripePayments (~> 23.30.0)
    - StripePaymentSheet (~> 23.30.0)
    - StripePaymentsUI (~> 23.30.0)
  - StripeApplePay (23.30.0):
    - StripeCore (= 23.30.0)
  - StripeCore (23.30.0)
  - StripeFinancialConnections (23.30.0):
    - StripeCore (= 23.30.0)
    - StripeUICore (= 23.30.0)
  - StripePayments (23.30.0):
    - StripeCore (= 23.30.0)
    - StripePayments/Stripe3DS2 (= 23.30.0)
  - StripePayments/Stripe3DS2 (23.30.0):
    - StripeCore (= 23.30.0)
  - StripePaymentSheet (23.30.0):
    - StripeApplePay (= 23.30.0)
    - StripeCore (= 23.30.0)
    - StripePayments (= 23.30.0)
    - StripePaymentsUI (= 23.30.0)
  - StripePaymentsUI (23.30.0):
    - StripeCore (= 23.30.0)
    - StripePayments (= 23.30.0)
    - StripeUICore (= 23.30.0)
  - StripeUICore (23.30.0):
    - StripeCore (= 23.30.0)
  - Yoga (0.0.0)

DEPENDENCIES:
  - boost (from `../node_modules/react-native/third-party-podspecs/boost.podspec`)
  - DoubleConversion (from `../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec`)
  - EXConstants (from `../node_modules/expo-constants/ios`)
  - EXJSONUtils (from `../node_modules/expo-json-utils/ios`)
  - EXManifests (from `../node_modules/expo-manifests/ios`)
  - Expo (from `../node_modules/expo`)
  - expo-dev-client (from `../node_modules/expo-dev-client/ios`)
  - expo-dev-launcher (from `../node_modules/expo-dev-launcher`)
  - expo-dev-menu (from `../node_modules/expo-dev-menu`)
  - expo-dev-menu-interface (from `../node_modules/expo-dev-menu-interface/ios`)
  - ExpoAsset (from `../node_modules/expo-asset/ios`)
  - ExpoFileSystem (from `../node_modules/expo-file-system/ios`)
  - ExpoFont (from `../node_modules/expo-font/ios`)
  - ExpoKeepAwake (from `../node_modules/expo-keep-awake/ios`)
  - ExpoLocalization (from `../node_modules/expo-localization/ios`)
  - ExpoModulesCore (from `../node_modules/expo-modules-core`)
  - EXSplashScreen (from `../node_modules/expo-splash-screen/ios`)
  - EXUpdatesInterface (from `../node_modules/expo-updates-interface/ios`)
  - FBLazyVector (from `../node_modules/react-native/Libraries/FBLazyVector`)
  - FirebaseCoreInternal
  - fmt (from `../node_modules/react-native/third-party-podspecs/fmt.podspec`)
  - glog (from `../node_modules/react-native/third-party-podspecs/glog.podspec`)
  - GoogleUtilities
  - hermes-engine (from `../node_modules/react-native/sdks/hermes-engine/hermes-engine.podspec`)
  - RCT-Folly (from `../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec`)
  - RCT-Folly/Fabric (from `../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec`)
  - RCTDeprecation (from `../node_modules/react-native/ReactApple/Libraries/RCTFoundation/RCTDeprecation`)
  - RCTRequired (from `../node_modules/react-native/Libraries/Required`)
  - RCTTypeSafety (from `../node_modules/react-native/Libraries/TypeSafety`)
  - React (from `../node_modules/react-native/`)
  - React-callinvoker (from `../node_modules/react-native/ReactCommon/callinvoker`)
  - React-Codegen (from `build/generated/ios`)
  - React-Core (from `../node_modules/react-native/`)
  - React-Core/RCTWebSocket (from `../node_modules/react-native/`)
  - React-CoreModules (from `../node_modules/react-native/React/CoreModules`)
  - React-cxxreact (from `../node_modules/react-native/ReactCommon/cxxreact`)
  - React-debug (from `../node_modules/react-native/ReactCommon/react/debug`)
  - React-Fabric (from `../node_modules/react-native/ReactCommon`)
  - React-FabricImage (from `../node_modules/react-native/ReactCommon`)
  - React-featureflags (from `../node_modules/react-native/ReactCommon/react/featureflags`)
  - React-graphics (from `../node_modules/react-native/ReactCommon/react/renderer/graphics`)
  - React-hermes (from `../node_modules/react-native/ReactCommon/hermes`)
  - React-ImageManager (from `../node_modules/react-native/ReactCommon/react/renderer/imagemanager/platform/ios`)
  - React-jserrorhandler (from `../node_modules/react-native/ReactCommon/jserrorhandler`)
  - React-jsi (from `../node_modules/react-native/ReactCommon/jsi`)
  - React-jsiexecutor (from `../node_modules/react-native/ReactCommon/jsiexecutor`)
  - React-jsinspector (from `../node_modules/react-native/ReactCommon/jsinspector-modern`)
  - React-jsitracing (from `../node_modules/react-native/ReactCommon/hermes/executor/`)
  - React-logger (from `../node_modules/react-native/ReactCommon/logger`)
  - React-Mapbuffer (from `../node_modules/react-native/ReactCommon`)
  - react-native-safe-area-context (from `../node_modules/react-native-safe-area-context`)
  - React-nativeconfig (from `../node_modules/react-native/ReactCommon`)
  - React-NativeModulesApple (from `../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios`)
  - React-perflogger (from `../node_modules/react-native/ReactCommon/reactperflogger`)
  - React-RCTActionSheet (from `../node_modules/react-native/Libraries/ActionSheetIOS`)
  - React-RCTAnimation (from `../node_modules/react-native/Libraries/NativeAnimation`)
  - React-RCTAppDelegate (from `../node_modules/react-native/Libraries/AppDelegate`)
  - React-RCTBlob (from `../node_modules/react-native/Libraries/Blob`)
  - React-RCTFabric (from `../node_modules/react-native/React`)
  - React-RCTImage (from `../node_modules/react-native/Libraries/Image`)
  - React-RCTLinking (from `../node_modules/react-native/Libraries/LinkingIOS`)
  - React-RCTNetwork (from `../node_modules/react-native/Libraries/Network`)
  - React-RCTSettings (from `../node_modules/react-native/Libraries/Settings`)
  - React-RCTText (from `../node_modules/react-native/Libraries/Text`)
  - React-RCTVibration (from `../node_modules/react-native/Libraries/Vibration`)
  - React-rendererdebug (from `../node_modules/react-native/ReactCommon/react/renderer/debug`)
  - React-rncore (from `../node_modules/react-native/ReactCommon`)
  - React-RuntimeApple (from `../node_modules/react-native/ReactCommon/react/runtime/platform/ios`)
  - React-RuntimeCore (from `../node_modules/react-native/ReactCommon/react/runtime`)
  - React-runtimeexecutor (from `../node_modules/react-native/ReactCommon/runtimeexecutor`)
  - React-RuntimeHermes (from `../node_modules/react-native/ReactCommon/react/runtime`)
  - React-runtimescheduler (from `../node_modules/react-native/ReactCommon/react/renderer/runtimescheduler`)
  - React-utils (from `../node_modules/react-native/ReactCommon/react/utils`)
  - ReactCommon (from `../node_modules/react-native/ReactCommon`)
  - ReactCommon/turbomodule/core (from `../node_modules/react-native/ReactCommon`)
  - "RNCAsyncStorage (from `../node_modules/@react-native-async-storage/async-storage`)"
  - "RNFBApp (from `../node_modules/@react-native-firebase/app`)"
  - RNGestureHandler (from `../node_modules/react-native-gesture-handler`)
  - RNReanimated (from `../node_modules/react-native-reanimated`)
  - RNScreens (from `../node_modules/react-native-screens`)
  - RNSVG (from `../node_modules/react-native-svg`)
  - Stripe (~> 23.30.0)
  - "stripe-react-native (from `../node_modules/@stripe/stripe-react-native`)"
  - StripeApplePay (~> 23.30.0)
  - StripePayments (~> 23.30.0)
  - Yoga (from `../node_modules/react-native/ReactCommon/yoga`)

SPEC REPOS:
  trunk:
    - Firebase
    - FirebaseCore
    - FirebaseCoreInternal
    - GoogleUtilities
    - SocketRocket
    - Stripe
    - StripeApplePay
    - StripeCore
    - StripeFinancialConnections
    - StripePayments
    - StripePaymentSheet
    - StripePaymentsUI
    - StripeUICore

EXTERNAL SOURCES:
  boost:
    :podspec: "../node_modules/react-native/third-party-podspecs/boost.podspec"
  DoubleConversion:
    :podspec: "../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec"
  EXConstants:
    :path: "../node_modules/expo-constants/ios"
  EXJSONUtils:
    :path: "../node_modules/expo-json-utils/ios"
  EXManifests:
    :path: "../node_modules/expo-manifests/ios"
  Expo:
    :path: "../node_modules/expo"
  expo-dev-client:
    :path: "../node_modules/expo-dev-client/ios"
  expo-dev-launcher:
    :path: "../node_modules/expo-dev-launcher"
  expo-dev-menu:
    :path: "../node_modules/expo-dev-menu"
  expo-dev-menu-interface:
    :path: "../node_modules/expo-dev-menu-interface/ios"
  ExpoAsset:
    :path: "../node_modules/expo-asset/ios"
  ExpoFileSystem:
    :path: "../node_modules/expo-file-system/ios"
  ExpoFont:
    :path: "../node_modules/expo-font/ios"
  ExpoKeepAwake:
    :path: "../node_modules/expo-keep-awake/ios"
  ExpoLocalization:
    :path: "../node_modules/expo-localization/ios"
  ExpoModulesCore:
    :path: "../node_modules/expo-modules-core"
  EXSplashScreen:
    :path: "../node_modules/expo-splash-screen/ios"
  EXUpdatesInterface:
    :path: "../node_modules/expo-updates-interface/ios"
  FBLazyVector:
    :path: "../node_modules/react-native/Libraries/FBLazyVector"
  fmt:
    :podspec: "../node_modules/react-native/third-party-podspecs/fmt.podspec"
  glog:
    :podspec: "../node_modules/react-native/third-party-podspecs/glog.podspec"
  hermes-engine:
    :podspec: "../node_modules/react-native/sdks/hermes-engine/hermes-engine.podspec"
    :tag: hermes-2024-06-28-RNv0.74.3-7bda0c267e76d11b68a585f84cfdd65000babf85
  RCT-Folly:
    :podspec: "../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec"
  RCTDeprecation:
    :path: "../node_modules/react-native/ReactApple/Libraries/RCTFoundation/RCTDeprecation"
  RCTRequired:
    :path: "../node_modules/react-native/Libraries/Required"
  RCTTypeSafety:
    :path: "../node_modules/react-native/Libraries/TypeSafety"
  React:
    :path: "../node_modules/react-native/"
  React-callinvoker:
    :path: "../node_modules/react-native/ReactCommon/callinvoker"
  React-Codegen:
    :path: build/generated/ios
  React-Core:
    :path: "../node_modules/react-native/"
  React-CoreModules:
    :path: "../node_modules/react-native/React/CoreModules"
  React-cxxreact:
    :path: "../node_modules/react-native/ReactCommon/cxxreact"
  React-debug:
    :path: "../node_modules/react-native/ReactCommon/react/debug"
  React-Fabric:
    :path: "../node_modules/react-native/ReactCommon"
  React-FabricImage:
    :path: "../node_modules/react-native/ReactCommon"
  React-featureflags:
    :path: "../node_modules/react-native/ReactCommon/react/featureflags"
  React-graphics:
    :path: "../node_modules/react-native/ReactCommon/react/renderer/graphics"
  React-hermes:
    :path: "../node_modules/react-native/ReactCommon/hermes"
  React-ImageManager:
    :path: "../node_modules/react-native/ReactCommon/react/renderer/imagemanager/platform/ios"
  React-jserrorhandler:
    :path: "../node_modules/react-native/ReactCommon/jserrorhandler"
  React-jsi:
    :path: "../node_modules/react-native/ReactCommon/jsi"
  React-jsiexecutor:
    :path: "../node_modules/react-native/ReactCommon/jsiexecutor"
  React-jsinspector:
    :path: "../node_modules/react-native/ReactCommon/jsinspector-modern"
  React-jsitracing:
    :path: "../node_modules/react-native/ReactCommon/hermes/executor/"
  React-logger:
    :path: "../node_modules/react-native/ReactCommon/logger"
  React-Mapbuffer:
    :path: "../node_modules/react-native/ReactCommon"
  react-native-safe-area-context:
    :path: "../node_modules/react-native-safe-area-context"
  React-nativeconfig:
    :path: "../node_modules/react-native/ReactCommon"
  React-NativeModulesApple:
    :path: "../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios"
  React-perflogger:
    :path: "../node_modules/react-native/ReactCommon/reactperflogger"
  React-RCTActionSheet:
    :path: "../node_modules/react-native/Libraries/ActionSheetIOS"
  React-RCTAnimation:
    :path: "../node_modules/react-native/Libraries/NativeAnimation"
  React-RCTAppDelegate:
    :path: "../node_modules/react-native/Libraries/AppDelegate"
  React-RCTBlob:
    :path: "../node_modules/react-native/Libraries/Blob"
  React-RCTFabric:
    :path: "../node_modules/react-native/React"
  React-RCTImage:
    :path: "../node_modules/react-native/Libraries/Image"
  React-RCTLinking:
    :path: "../node_modules/react-native/Libraries/LinkingIOS"
  React-RCTNetwork:
    :path: "../node_modules/react-native/Libraries/Network"
  React-RCTSettings:
    :path: "../node_modules/react-native/Libraries/Settings"
  React-RCTText:
    :path: "../node_modules/react-native/Libraries/Text"
  React-RCTVibration:
    :path: "../node_modules/react-native/Libraries/Vibration"
  React-rendererdebug:
    :path: "../node_modules/react-native/ReactCommon/react/renderer/debug"
  React-rncore:
    :path: "../node_modules/react-native/ReactCommon"
  React-RuntimeApple:
    :path: "../node_modules/react-native/ReactCommon/react/runtime/platform/ios"
  React-RuntimeCore:
    :path: "../node_modules/react-native/ReactCommon/react/runtime"
  React-runtimeexecutor:
    :path: "../node_modules/react-native/ReactCommon/runtimeexecutor"
  React-RuntimeHermes:
    :path: "../node_modules/react-native/ReactCommon/react/runtime"
  React-runtimescheduler:
    :path: "../node_modules/react-native/ReactCommon/react/renderer/runtimescheduler"
  React-utils:
    :path: "../node_modules/react-native/ReactCommon/react/utils"
  ReactCommon:
    :path: "../node_modules/react-native/ReactCommon"
  RNCAsyncStorage:
    :path: "../node_modules/@react-native-async-storage/async-storage"
  RNFBApp:
    :path: "../node_modules/@react-native-firebase/app"
  RNGestureHandler:
    :path: "../node_modules/react-native-gesture-handler"
  RNReanimated:
    :path: "../node_modules/react-native-reanimated"
  RNScreens:
    :path: "../node_modules/react-native-screens"
  RNSVG:
    :path: "../node_modules/react-native-svg"
  stripe-react-native:
    :path: "../node_modules/@stripe/stripe-react-native"
  Yoga:
    :path: "../node_modules/react-native/ReactCommon/yoga"

SPEC CHECKSUMS:
  boost: d3f49c53809116a5d38da093a8aa78bf551aed09
  DoubleConversion: 76ab83afb40bddeeee456813d9c04f67f78771b5
  EXConstants: 409690fbfd5afea964e5e9d6c4eb2c2b59222c59
  EXJSONUtils: 30c17fd9cc364d722c0946a550dfbf1be92ef6a4
  EXManifests: c1fab4c3237675e7b0299ea8df0bcb14baca4f42
  Expo: 9b6666ef2fedcfc89c5b9be2aa1ce12b81f9e7f5
  expo-dev-client: 0cec8ec81fd01c10d9afcd9f6de3768b10644aee
  expo-dev-launcher: 45a630560cf5316b3f85ba4007d09c2557521fad
  expo-dev-menu: f9488841a1e709bb7d34f2c519af5e79c33a043b
  expo-dev-menu-interface: 5764ad537419c1a5e8f66f668e29c81e8aca290c
  ExpoAsset: 323700f291684f110fb55f0d4022a3362ea9f875
  ExpoFileSystem: 80bfe850b1f9922c16905822ecbf97acd711dc51
  ExpoFont: 00756e6c796d8f7ee8d211e29c8b619e75cbf238
  ExpoKeepAwake: 3b8815d9dd1d419ee474df004021c69fdd316d08
  ExpoLocalization: f04eeec2e35bed01ab61c72ee1768ec04d093d01
  ExpoModulesCore: 1914927fe4a693215b1ed57eb934c15641d4aef7
  EXSplashScreen: 20d60cb03f05e50c23745bf2dc2573b9b2eb42ec
  EXUpdatesInterface: 996527fd7d1a5d271eb523258d603f8f92038f24
  FBLazyVector: ac12dc084d1c8ec4cc4d7b3cf1b0ebda6dab85af
  Firebase: cf1b19f21410b029b6786a54e9764a0cacad3c99
  FirebaseCore: e0510f1523bc0eb21653cac00792e1e2bd6f1771
  FirebaseCoreInternal: f47dd28ae7782e6a4738aad3106071a8fe0af604
  fmt: 4c2741a687cc09f0634a2e2c72a838b99f1ff120
  glog: fdfdfe5479092de0c4bdbebedd9056951f092c4f
  GoogleUtilities: 26a3abef001b6533cf678d3eb38fd3f614b7872d
  hermes-engine: 8c1577f3fdb849cbe7729c2e7b5abc4b845e88f8
  RCT-Folly: 02617c592a293bd6d418e0a88ff4ee1f88329b47
  RCTDeprecation: 3afceddffa65aee666dafd6f0116f1d975db1584
  RCTRequired: ec1239bc9d8bf63e10fb92bd8b26171a9258e0c1
  RCTTypeSafety: f5ecbc86c5c5fa163c05acb7a1c5012e15b5f994
  React: fc9fa7258eff606f44d58c5b233a82dc9cf09018
  React-callinvoker: e3fab14d69607fb7e8e3a57e5a415aed863d3599
  React-Codegen: bd1a15f54af401efee5f439aa6fd420b10550125
  React-Core: 3a5fd9e781cecf87803e5b091496a606a3df774a
  React-CoreModules: cbf4707dafab8f9f826ac0c63a07d0bf5d01e256
  React-cxxreact: 7b188556271e3c7fdf22a04819f6a6225045b9dd
  React-debug: 2d6f912c0c4c91a9fde617d8425088af7315c10b
  React-Fabric: 47ff62e0c7f017606585327f6016190625295c5e
  React-FabricImage: 823627aa521b4ecc896334f0dbf2bc8376edbf1e
  React-featureflags: 2a4555681de0d4b683d98d7e9fd7bdf9e9ce1aa2
  React-graphics: edbd2a6c018b2e2d541ab8cb886cc31babf14646
  React-hermes: a7054fbcbda3957e3c5eaad06ef9bf79998d535a
  React-ImageManager: 314824c4bb6f152699724dc9eb3ce544b87048bd
  React-jserrorhandler: fffe10523886a352161ef492af2063651721c8ee
  React-jsi: f3ce1dd2e950b6ad12b65ea3ef89168f1b94c584
  React-jsiexecutor: b4df3a27973d82f9abf3c4bd0f88e042cda25f16
  React-jsinspector: 2ea90b8e53970a1fea1449fb8e6419e21ca79867
  React-jsitracing: c83efb63c8e9e1dff72a3c56e88ae1c530a87795
  React-logger: 257858bd55f3a4e1bc0cf07ddc8fb9faba6f8c7c
  React-Mapbuffer: dce508662b995ffefd29e278a16b78217039d43d
  react-native-safe-area-context: a240ad4b683349e48b1d51fed1611138d1bdad97
  React-nativeconfig: f326487bc61eba3f0e328da6efb2711533dcac46
  React-NativeModulesApple: d89733f5baed8b9249ca5a8e497d63c550097312
  React-perflogger: ed4e0c65781521e0424f2e5e40b40cc7879d737e
  React-RCTActionSheet: 49d53ff03bb5688ca4606c55859053a0cd129ea5
  React-RCTAnimation: 07b4923885c52c397c4ec103924bf6e53b42c73e
  React-RCTAppDelegate: 316e295076734baf9bdf1bfac7d92ab647aed930
  React-RCTBlob: 85c57b0d5e667ff8a472163ba3af0628171a64bb
  React-RCTFabric: 62695e345da7c451b05a131f0c6ba80367dbd5c3
  React-RCTImage: b965c85bec820e2a9c154b1fb00a2ecdd59a9c92
  React-RCTLinking: 75f04a5f27c26c4e73a39c50df470820d219df79
  React-RCTNetwork: c1a9143f4d5778efc92da40d83969d03912ccc24
  React-RCTSettings: c6800f91c0ecd48868cd5db754b0b0a7f5ffe039
  React-RCTText: b923e24f9b7250bc4f7ab154c4168ad9f8d8fc9d
  React-RCTVibration: 08c4f0c917c435b3619386c25a94ee5d64c250f0
  React-rendererdebug: fac75dc155e1202cfc187485a6e4f6e842fcc5c7
  React-rncore: 12dc32f08f195e573e9d969a348b976a3d057bbc
  React-RuntimeApple: 5c7591dd19de1c7fefe8e61cf934d8f8f9fc0409
  React-RuntimeCore: ec3c8be706ca2e4607eb8c675d32512352501f9e
  React-runtimeexecutor: 0e688aefc14c6bc8601f4968d8d01c3fb6446844
  React-RuntimeHermes: df243bd7c8d4ba3bd237ce6ded22031e02d37908
  React-runtimescheduler: db7189185a2e5912b0d17194302e501f801a381e
  React-utils: 3f1fcffc14893afb9a7e5b7c736353873cc5fc95
  ReactCommon: f79ae672224dc1e6c2d932062176883c98eebd57
  RNCAsyncStorage: 826b603ae9c0f88b5ac4e956801f755109fa4d5c
  RNFBApp: fcb5659457f5a4857b7e54b4c29a5bbaa8b3b9a9
  RNGestureHandler: 20a4307fd21cbff339abfcfa68192f3f0a6a518b
  RNReanimated: d51431fd3597a8f8320319dce8e42cee82a5445f
  RNScreens: 30249f9331c3b00ae7cb7922e11f58b3ed369c07
  RNSVG: 43b64ed39c14ce830d840903774154ca0c1f27ec
  SocketRocket: abac6f5de4d4d62d24e11868d7a2f427e0ef940d
  Stripe: 9757efc154de1d9615cbea4836d590bc4034d3a4
  stripe-react-native: de0e4bc24122da31406bff20a1bff16994aa9796
  StripeApplePay: ca33933601302742623762157d587b79b942d073
  StripeCore: 2af250a2366ff2bbf64d4243c5f9bbf2a98b2aaf
  StripeFinancialConnections: 3ab1ef6182ec44e71c29e9a2100b663f9713ac20
  StripePayments: 658a16bd34d20c8185aa281866227b9e1743300e
  StripePaymentSheet: eac031f76d7fbb4f52df9b9c39be5be671ca4c07
  StripePaymentsUI: 7d7cffb2ecfc0d6b5ac3a4488c02893a5ff6cc77
  StripeUICore: bb102d453b1e1a10a37f810bc0a9aa0675fb17fd
  Yoga: 33622183a85805e12703cd618b2c16bfd18bfffb

PODFILE CHECKSUM: aac9a4269aa6c1d83760f4608f9a850616fc0ea1

COCOAPODS: 1.16.2

================
File: ios/Podfile.properties.json
================
{
  "expo.jsEngine": "hermes",
  "EX_DEV_CLIENT_NETWORK_INSPECTOR": "true"
}

================
File: ios/ScreenTimeBridge.m
================
//
//  ScreenTimeBridge.m
//  Pledge
//
//  Created by mrallende on 29/10/24.
//

#import <Foundation/Foundation.h>
#import <React/RCTBridgeModule.h>

@interface RCT_EXTERN_MODULE(ScreenTimeBridge, NSObject)

RCT_EXTERN_METHOD(getInstagramUsage:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)

@end

================
File: ios/ScreenTimeBridge.swift
================
//
//  ScreenTimeBridge.swift
//  Pledge
//
//  Created by juan alonso allende on 29/10/24.
//

import Foundation
import DeviceActivity
import FamilyControls

@objc(ScreenTimeBridge)
class ScreenTimeBridge: NSObject {

    @objc func getInstagramUsage(_ resolve: @escaping RCTPromiseResolveBlock, reject: @escaping RCTPromiseRejectBlock) {
        FamilyControls.AuthorizationCenter.shared.requestAuthorization { result in
            switch result {
            case .success():
                self.fetchInstagramUsage(resolve: resolve, reject: reject)
            case .failure(let error):
                reject("AUTH_ERROR", "Authorization failed", error)
            }
        }
    }

    private func fetchInstagramUsage(resolve: @escaping RCTPromiseResolveBlock, reject: @escaping RCTPromiseRejectBlock) {
        let activityCenter = DeviceActivityCenter()
        let instagramActivity = DeviceActivityName("InstagramUsage")

        activityCenter.activityReports(for: instagramActivity, during: .lastWeek) { report, error in
            if let error = error {
                reject("FETCH_ERROR", "Failed to fetch activity report", error)
                return
            }

            guard let report = report, let instagramUsage = report.totalUsage(for: ["com.burbn.instagram"]) else {
                resolve("No data available")
                return
            }

            let hours = Int(instagramUsage / 3600)
            let minutes = Int(instagramUsage.truncatingRemainder(dividingBy: 3600) / 60)
            resolve("\(hours)h \(minutes)m")
        }
    }
}

================
File: src/components/buttons/main-button.tsx
================
import React from "react";
import { View, Text, StyleSheet, Pressable } from "react-native";
import colors from "../../theme/colors";

interface MainButtonProps {
  onPress: () => void;
  text: string;
  style?: any;
}

const MainButton: React.FC<MainButtonProps> = ({ onPress, text, style }) => {
  return (
    <View style={[{ alignSelf: "center" }, style]}>
      <Pressable onPress={onPress} style={styles.container}>
        <Text style={styles.text}>{text}</Text>
      </Pressable>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // alignSelf: "flex-start",
    backgroundColor: colors.orange,
    paddingHorizontal: 17,
    paddingVertical: 12,
    borderRadius: 25,
    justifyContent: "center",
    alignItems: "center",
  },
  text: {
    color: colors.white,
    fontSize: 16,
    fontWeight: "500",
  },
});

export default MainButton;

================
File: src/components/buttons/secondary-button.tsx
================
import React from "react";
import { View, Text, StyleSheet, Pressable } from "react-native";
import colors from "../../theme/colors";

interface SecondaryButtonProps {
  onPress: () => void;
  text: string;
  style?: any;
}

const SecondaryButton: React.FC<SecondaryButtonProps> = ({
  onPress,
  text,
  style,
}) => {
  return (
    <View style={[{ alignSelf: "center" }, style]}>
      <Pressable onPress={onPress} style={styles.container}>
        <Text style={styles.text}>{text}</Text>
      </Pressable>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // alignSelf: "flex-start",
    backgroundColor: colors.white,
    paddingHorizontal: 17,
    paddingVertical: 12,
    borderRadius: 25,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 1,
    borderColor: colors.orange,
  },
  text: {
    color: colors.orange,
    fontSize: 16,
    fontWeight: "500",
  },
});

export default SecondaryButton;

================
File: src/components/cards/home-card-wrapper.tsx
================
import React from "react";
import { View, Text, StyleSheet, Pressable } from "react-native";
import { SCREEN_WIDTH } from "../../utils/constants/dimensions";
import colors from "../../theme/colors";

interface HomeCardWrapperProps {
  children: React.ReactNode;
  style: object;
  onPress?: () => void;
}

const HomeCardWrapper: React.FC<HomeCardWrapperProps> = ({
  children,
  style,
  onPress,
}) => {
  return (
    <Pressable onPress={onPress} style={[styles.container, style]}>
      {children}
    </Pressable>
  );
};

const styles = StyleSheet.create({
  container: {
    alignSelf: "center",
    width: SCREEN_WIDTH * 0.85,
    backgroundColor: colors.white,
    borderWidth: 1,
    borderColor: colors.orange,
    borderRadius: 20,
    paddingVertical: 9,
    paddingHorizontal: 19,
  },
});

export default HomeCardWrapper;

================
File: src/components/carousels/instructions-carousel.tsx
================
// import React, { useEffect, useRef, useState } from "react";
// import { View, Text, StyleSheet, Animated, Image } from "react-native";
// import { CarouselItem } from "../../types";

// interface InstructionCarouselProps {
//   // define your props here
// }

// const items: CarouselItem[] = [
//   {
//     image: require("../../../assets/images/onboarding/instructions/instruction-1.png"),
//     title: "Set Your Limit",
//     subtitle:
//       "Choose how many hours you want to spend on social media each day.",
//   },
//   {
//     image: require("../../../assets/images/onboarding/instructions/instruction-2.png"),
//     title: "Make a Pledge",
//     subtitle:
//       "Put your money where your intentions are. Pledge an amount between €10 and €1000.",
//   },
//   {
//     image: require("../../../assets/images/onboarding/instructions/instruction-3.png"),
//     title: "We Keep You Accountable",
//     subtitle:
//       "Track your social media screen time daily and monthly to stay on target.",
//   },
//   {
//     image: require("../../../assets/images/onboarding/instructions/instruction-4.png"),
//     title: "Stay Strong",
//     subtitle:
//       "If you meet your screen time goal, you win. But if, after 30 days, your daily usage goes over your limit, we’ll donate your Pledge to a charity.",
//   },
// ];

// const InstructionCarousel: React.FC<InstructionCarouselProps> = (props) => {
//   const [currentIndex, setCurrentIndex] = useState(0);
//   const fadeAnim = useRef(new Animated.Value(1)).current;

//   useEffect(() => {
//     const interval = setInterval(() => {
//       Animated.sequence([
//         Animated.timing(fadeAnim, {
//           toValue: 0,
//           duration: 500,
//           useNativeDriver: true,
//         }),
//         Animated.timing(fadeAnim, {
//           toValue: 1,
//           duration: 500,
//           useNativeDriver: true,
//         }),
//       ]).start(() => {
//         setCurrentIndex((prevIndex) =>
//           prevIndex === items.length - 1 ? 0 : prevIndex + 1
//         );
//       });
//     }, 2000);

//     return () => clearInterval(interval);
//   }, [fadeAnim]);

//   return (
//     <View style={styles.container}>
//       <Animated.View style={{ opacity: fadeAnim }}>
//         <Image source={items[currentIndex].image} style={styles.image} />
//         <Text style={styles.title}>{items[currentIndex].title}</Text>
//         <Text style={styles.subtitle}>{items[currentIndex].subtitle}</Text>
//       </Animated.View>

//       <View style={styles.dotContainer}>
//         {items.map((_, index) => (
//           <View
//             key={index}
//             style={[styles.dot, currentIndex === index && styles.activeDot]}
//           />
//         ))}
//       </View>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     // alignItems: "center",
//     // justifyContent: "center",
//     backgroundColor: "#FFF6F3", // Background color similar to the screenshot
//     marginTop: 100,
//   },
//   image: {
//     width: 243,
//     height: 276,
//     resizeMode: "contain",
//     marginBottom: 20,
//     alignSelf: "center",
//   },
//   title: {
//     fontSize: 24,
//     fontWeight: "bold",
//     textAlign: "center",
//     color: "#000",
//     marginBottom: 10,
//   },
//   subtitle: {
//     fontSize: 18,
//     fontFamily: 'InstrumentSerif-Regular',
//     textAlign: "center",
//     color: "#666",
//     paddingHorizontal: 20,
//   },
//   dotContainer: {
//     position: "absolute",
//     bottom: 150,
//     flexDirection: "row",
//     marginTop: 20,
//     alignSelf: "center",
//   },
//   dot: {
//     width: 11,
//     height: 11,
//     borderRadius: 7,
//     backgroundColor: "#000000",
//     marginHorizontal: 4,
//   },
//   activeDot: {
//     backgroundColor: "#FF6A3D",
//   },
// });

// export default InstructionCarousel;

import React, { useEffect, useRef, useState } from "react";
import { View, Text, StyleSheet, Animated, Image } from "react-native";
import { CarouselItem } from "../../types";

interface InstructionCarouselProps {
  // define your props here
}

const items: CarouselItem[] = [
  {
    image: require("../../../assets/images/onboarding/instructions/instruction-1.png"),
    title: "Set Your Limit",
    subtitle:
      "Choose how many hours you want to spend on social media each day.",
  },
  {
    image: require("../../../assets/images/onboarding/instructions/instruction-2.png"),
    title: "Make a Pledge",
    subtitle:
      "Put your money where your intentions are. Pledge an amount between €10 and €1000.",
  },
  {
    image: require("../../../assets/images/onboarding/instructions/instruction-3.png"),
    title: "We Keep You Accountable",
    subtitle:
      "Track your social media screen time daily and monthly to stay on target.",
  },
  {
    image: require("../../../assets/images/onboarding/instructions/instruction-4.png"),
    title: "Stay Strong",
    subtitle:
      "If you meet your screen time goal, you win. But if, after 30 days, your daily usage goes over your limit, we’ll donate your Pledge to a charity.",
  },
];

const InstructionCarousel: React.FC<InstructionCarouselProps> = (props) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const fadeAnim = useRef(new Animated.Value(1)).current;

  useEffect(() => {
    const interval = setInterval(() => {
      // Start fade-out animation
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 500,
        useNativeDriver: true,
      }).start(() => {
        setCurrentIndex((prevIndex) =>
          prevIndex === items.length - 1 ? 0 : prevIndex + 1
        );

        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 500,
          useNativeDriver: true,
        }).start();
      });
    }, 4000);

    return () => clearInterval(interval);
  }, []);

  return (
    <View style={styles.container}>
      <Animated.View style={{ opacity: fadeAnim }}>
        <Image source={items[currentIndex].image} style={styles.image} />
        <Text style={styles.title}>{items[currentIndex].title}</Text>
        <Text style={styles.subtitle}>{items[currentIndex].subtitle}</Text>
      </Animated.View>

      <View style={styles.dotContainer}>
        {items.map((_, index) => (
          <View
            key={index}
            style={[styles.dot, currentIndex === index && styles.activeDot]}
          />
        ))}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFF6F3", // Background color similar to the screenshot
    marginTop: 100,
  },
  image: {
    width: 243,
    height: 276,
    resizeMode: "contain",
    marginBottom: 20,
    alignSelf: "center",
  },
  title: {
    fontSize: 24,
    fontWeight: "600",
    textAlign: "center",
    color: "#000",
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 18,
    fontFamily: "InstrumentSerif-Regular",
    textAlign: "center",
    color: "#666",
    paddingHorizontal: 20,
  },
  dotContainer: {
    position: "absolute",
    bottom: 120,
    flexDirection: "row",
    marginTop: 20,
    alignSelf: "center",
  },
  dot: {
    width: 11,
    height: 11,
    borderRadius: 7,
    backgroundColor: "#000000",
    marginHorizontal: 4,
  },
  activeDot: {
    backgroundColor: "#FF6A3D",
  },
});

export default InstructionCarousel;

================
File: src/components/checkboxs/main-checkbox.tsx
================
import React from "react";
import { View, Text, StyleSheet } from "react-native";

interface MainCheckboxProps {
  size: number;
  isChecked: boolean;
  setIsChecked: (value: boolean) => void;
}

const MainCheckbox: React.FC<MainCheckboxProps> = ({
  size,
  isChecked,
  setIsChecked,
}) => {
  return (
    <View style={styles.container}>
      <Text>Hello, React Native!</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

export default MainCheckbox;

================
File: src/components/headers/main-header.tsx
================
import React from "react";
import { View, Text } from "react-native";
import { SCREEN_WIDTH } from "../../utils/constants/dimensions";
import colors from "../../theme/colors";

const MainHeader: React.FC = ({}) => {
  return (
    <View
      style={{
        marginTop: 16,
        // position: "absolute",
        width: SCREEN_WIDTH,
        alignItems: "center",
        alignSelf: 'center'
      }}
    >
      <Text
        style={[
          {
            fontSize: 35,
            fontWeight: "700",
            color: colors.black,
          },
        ]}
      >
        Pledge
      </Text>
      <Text
        style={[
          {
            fontSize: 12,
            letterSpacing: 4,
            fontWeight: "400",
            marginTop: 4,
            color: colors.orange,
          },
        ]}
      >
        the bet to break free
      </Text>
    </View>
  );
};

export default MainHeader;

================
File: src/components/layout/app-wrapper.tsx
================
import React from "react";
import { View, Text, StyleSheet, SafeAreaView } from "react-native";
import colors from "../../theme/colors";

interface AppWrapperProps {
  children: React.ReactNode;
}

const AppWrapper: React.FC<AppWrapperProps> = ({ children }) => {
  return <SafeAreaView style={styles.container}>{children}</SafeAreaView>;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.onboardingBackground,
  },
});

export default AppWrapper;

================
File: src/components/sliders/set-slider.tsx
================
import React, { useState } from "react";
import { View, Text, StyleSheet, PanResponder } from "react-native";
import { SCREEN_WIDTH } from "../../utils/constants/dimensions";

const SLIDER_WIDTH = SCREEN_WIDTH * 0.8;

interface SetSliderProps {
  min: number;
  max: number;
  onValueChange: (value: number) => void;
}

const SetSlider: React.FC<SetSliderProps> = ({ min, max, onValueChange }) => {
  const [value, setValue] = useState(min);
  const [startX, setStartX] = useState(0);

  const panResponder = PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onMoveShouldSetPanResponder: () => true,
    onPanResponderGrant: (event, gestureState) => {
      setStartX(gestureState.x0);
    },
    onPanResponderMove: (event, gestureState) => {
      let dx = gestureState.moveX - startX;
      let relativePosition = dx / SLIDER_WIDTH;
      let newValue = Math.round(relativePosition * (max - min) + min);

      if (newValue < min) newValue = min;
      if (newValue > max) newValue = max;

      setValue(newValue);
      onValueChange(newValue);
    },
  });

  const getThumbPosition = () => {
    return ((value - min) / (max - min)) * SLIDER_WIDTH;
  };

  const renderTickMarks = () => {
    const ticks = [10, 20, 40, 70, 200, 1000];
    return ticks.map((tick, index) => (
      <View key={index} style={styles.tickContainer}>
        <View style={styles.tick} />
        <Text style={styles.tickLabel}>{tick}</Text>
      </View>
    ));
  };

  return (
    <View style={styles.sliderContainer}>
      <View style={styles.track}>
        <View style={[styles.fill, { width: getThumbPosition() }]} />
        <View
          {...panResponder.panHandlers}
          style={[styles.thumb, { left: getThumbPosition() - 10 }]}
        />
      </View>

      <View style={styles.ticksContainer}>{renderTickMarks()}</View>
    </View>
  );
};

const styles = StyleSheet.create({
  sliderContainer: {
    width: SLIDER_WIDTH,
    marginTop: 20,
  },
  track: {
    height: 8,
    backgroundColor: "#e0e0e0",
    borderRadius: 4,
    position: "relative",
  },
  fill: {
    height: 8,
    backgroundColor: "#F77E45",
    borderRadius: 4,
    position: "absolute",
    left: 0,
    top: 0,
  },
  thumb: {
    width: 20,
    height: 20,
    backgroundColor: "#fff",
    borderRadius: 10,
    position: "absolute",
    top: -6,
    shadowColor: "#000",
    shadowOpacity: 0.2,
    shadowRadius: 3,
    shadowOffset: { width: 0, height: 1 },
    elevation: 3,
  },
  ticksContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    width: SLIDER_WIDTH,
    marginTop: 10,
  },
  tickContainer: {
    alignItems: "center",
  },
  tick: {
    width: 1,
    height: 10,
    backgroundColor: "#888",
    marginBottom: 5,
  },
  tickLabel: {
    fontSize: 12,
    color: "#888",
  },
});

export default SetSlider;

================
File: src/components/sliders/splash-slider.tsx
================
import React, { useState } from "react";
import { StyleSheet, View, Text, Dimensions, PanResponder } from "react-native";
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withSpring,
  withTiming,
} from "react-native-reanimated";

const { width } = Dimensions.get("window");

type SplashSliderProps = {
  isPledged: boolean;
  setIsPledged: (isPledged: boolean) => void;
};

const SplashSlider: React.FC<SplashSliderProps> = ({
  isPledged,
  setIsPledged,
}) => {
  const sliderValue = useSharedValue(0);

  const panResponder = PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onMoveShouldSetPanResponder: () => true,
    onPanResponderMove: (event, gestureState) => {
      const position = Math.max(0, Math.min(gestureState.dx, width * 0.6));
      sliderValue.value = withSpring(position);
    },
    onPanResponderRelease: (event, gestureState) => {
      if (gestureState.dx > width * 0.3) {
        sliderValue.value = withSpring(width * 0.65);
        setIsPledged(true);
      } else {
        sliderValue.value = withSpring(0);
        setIsPledged(false);
      }
    },
  });

  const animatedSliderStyle = useAnimatedStyle(() => {
    return {
      transform: [{ translateX: sliderValue.value }],
    };
  });

  const animatedBackgroundStyle = useAnimatedStyle(() => {
    return {
      backgroundColor: withTiming(isPledged ? "#E76F33" : "#f0f0f0", {
        duration: 500,
      }),
    };
  });

  return (
    <Animated.View style={[styles.sliderBackground, animatedBackgroundStyle]}>
      <Text style={[styles.text, { color: isPledged ? "#fff" : "#aaa" }]}>
        {isPledged ? "Let’s Pledge" : "Slide to Unlock"}
      </Text>
      <Animated.View
        style={[styles.sliderButton, animatedSliderStyle]}
        {...panResponder.panHandlers}
      >
        <Text style={styles.arrow}>{isPledged ? "✓" : "➔"}</Text>
      </Animated.View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  sliderBackground: {
    width: width * 0.8,
    height: 60,
    borderRadius: 30,
    justifyContent: "center",
    padding: 5,
    position: "relative",
  },
  text: {
    fontSize: 18,
    textAlign: "center",
    position: "absolute",
    width: "100%",
    zIndex: 0,
  },
  sliderButton: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: "#fff",
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    zIndex: 1,
  },
  arrow: {
    fontSize: 24,
    color: "#E76F33",
  },
});

export default SplashSlider;

================
File: src/components/switches/home-switch.tsx
================
// import React from "react";
// import { View, Text, StyleSheet, Pressable } from "react-native";
// import colors from "../../theme/colors";

// interface HomeSwitchProps {
//   openedTab: string;
//   setOpenedTab: (tab: string) => void;
// }

// const HomeSwitch: React.FC<HomeSwitchProps> = ({ openedTab, setOpenedTab }) => {
//   return (
//     <View style={styles.container}>
//       <Pressable
//         onPress={() => setOpenedTab("today")}
//         style={{
//           paddingVertical: 15,
//           paddingHorizontal: 39,
//           backgroundColor: openedTab === "today" ? colors.orange : colors.white,
//           borderRadius: 20,
//         }}
//       >
//         <Text
//           style={{
//             fontSize: 12,
//             color: openedTab === "today" ? colors.white : colors.orange,
//           }}
//         >
//           Today
//         </Text>
//       </Pressable>

//       <Pressable
//         onPress={() => setOpenedTab("total")}
//         style={{
//           paddingVertical: 15,
//           paddingHorizontal: 39,
//           backgroundColor: openedTab === "total" ? colors.orange : colors.white,
//           borderRadius: 20,
//         }}
//       >
//         <Text
//           style={{
//             fontSize: 12,
//             color: openedTab === "total" ? colors.white : colors.orange,
//           }}
//         >
//           Total
//         </Text>
//       </Pressable>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flexDirection: "row",
//     alignItems: "center",
//     alignSelf: "center",
//     borderRadius: 20,
//     backgroundColor: "white",
//     borderWidth: 1,
//     borderColor: "#E1E1E1",
//     marginTop: 26,
//   },
// });

// export default HomeSwitch;

import React, { useRef, useEffect } from "react";
import { View, Text, StyleSheet, Pressable, Animated } from "react-native";
import colors from "../../theme/colors";

interface HomeSwitchProps {
  openedTab: string;
  setOpenedTab: (tab: string) => void;
}

const HomeSwitch: React.FC<HomeSwitchProps> = ({ openedTab, setOpenedTab }) => {
  const scaleAnim = useRef(new Animated.Value(1)).current;
  const translateXAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    Animated.spring(translateXAnim, {
      toValue: openedTab === "today" ? 0 : 110,
      useNativeDriver: true,
    }).start();
  }, [openedTab]);

  const handlePress = (tab: string) => {
    Animated.sequence([
      Animated.timing(scaleAnim, {
        toValue: 0.95,
        duration: 100,
        useNativeDriver: true,
      }),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }),
    ]).start(() => {
      setOpenedTab(tab);
    });
  };

  return (
    <View style={styles.container}>
      <Animated.View
        style={[
          styles.slider,
          {
            transform: [{ translateX: translateXAnim }],
          },
        ]}
      />
      <Pressable onPress={() => handlePress("today")}>
        <Animated.View
          style={[
            styles.button,
            {
              transform: [{ scale: openedTab === "today" ? scaleAnim : 1 }],
            },
          ]}
        >
          <Text
            style={[
              styles.text,
              { color: openedTab === "today" ? colors.white : colors.orange },
            ]}
          >
            Today
          </Text>
        </Animated.View>
      </Pressable>

      <Pressable onPress={() => handlePress("total")}>
        <Animated.View
          style={[
            styles.button,
            {
              transform: [{ scale: openedTab === "total" ? scaleAnim : 1 }],
            },
          ]}
        >
          <Text
            style={[
              styles.text,
              { color: openedTab === "total" ? colors.white : colors.orange },
            ]}
          >
            Total
          </Text>
        </Animated.View>
      </Pressable>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    alignSelf: "center",
    borderRadius: 20,
    backgroundColor: colors.white,
    borderWidth: 1,
    borderColor: "#E1E1E1",
    marginTop: 26,
    position: "relative",
  },
  slider: {
    position: "absolute",
    width: 110,
    height: "100%",
    backgroundColor: colors.orange,
    borderRadius: 20,
    zIndex: -1,
  },
  button: {
    paddingVertical: 15,
    paddingHorizontal: 39,
  },
  text: {
    fontSize: 12,
  },
});

export default HomeSwitch;

================
File: src/hooks/useAppInit.tsx
================
import { useState, useEffect } from "react";
import { loadFonts } from "../utils/fonts";
import AsyncStorage from "@react-native-async-storage/async-storage";
// import * as Localization from "expo-localization";
// import { useSetAtom } from "jotai";
// import { userAtom } from "../store/user-atom";
// import i18n, { setLanguage } from "../languages/i18n";

export default function useAppInit() {
  const [isLoadingComplete, setLoadingComplete] = useState(false);
  const [initialRouteName, setInitialRouteName] = useState(null);
  const [isLogged, setIsLogged] = useState(false);
//   const setUser = useSetAtom(userAtom);

  useEffect(() => {
    async function loadResourcesAndDataAsync() {
      try {
        await loadFonts();
        // const setUpValue = await AsyncStorage.getItem("isSetUp");
        setInitialRouteName("Splash");
      } catch (e) {
        console.error("Failed to initialize app:", e);
      } finally {
        setLoadingComplete(true);
      }
    }
    loadResourcesAndDataAsync();
  }, []);

  return { isLoadingComplete, initialRouteName };
}

================
File: src/lists/apps-onboarding-grid.tsx
================
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
} from "react-native";
import { FontAwesome, FontAwesome5 } from "@expo/vector-icons";
import colors from "../theme/colors";

const appData = [
  {
    id: 1,
    name: "LinkedIn",
    icon: <FontAwesome name="linkedin-square" size={30} color="white" />,
  },
  {
    id: 2,
    name: "WhatsApp",
    icon: <FontAwesome name="whatsapp" size={30} color="white" />,
  },
  {
    id: 3,
    name: "Facebook",
    icon: <FontAwesome name="facebook-square" size={30} color="white" />,
  },
  {
    id: 4,
    name: "Snapchat",
    icon: <FontAwesome name="snapchat-ghost" size={30} color="white" />,
  },
  {
    id: 5,
    name: "X",
    icon: <FontAwesome5 name="twitter" size={30} color="white" />,
  },
  {
    id: 6,
    name: "YouTube",
    icon: <FontAwesome name="youtube-play" size={30} color="white" />,
  },
  {
    id: 7,
    name: "Instagram",
    icon: <FontAwesome name="instagram" size={30} color="white" />,
  },
  {
    id: 8,
    name: "TikTok",
    icon: <FontAwesome5 name="tiktok" size={30} color="white" />,
  },
  {
    id: 9,
    name: "Add More",
    icon: <FontAwesome name="plus" size={30} color="black" />,
  },
];

interface AppsOnboardingListProps {
  selectedApps: [];
  setSelectedApps: () => void;
}

const AppsOnboardingGrid: React.FC<AppsOnboardingListProps> = ({
  selectedApps,
  setSelectedApps,
}) => {
  const toggleAppSelection = (id: number) => {
    setSelectedApps((prevSelected) =>
      prevSelected.includes(id)
        ? prevSelected.filter((appId) => appId !== id)
        : [...prevSelected, id]
    );
  };

  const renderApp = ({ item }) => {
    const isSelected = selectedApps.includes(item.id);
    return (
      <TouchableOpacity
        style={[styles.appContainer, isSelected && {
          backgroundColor: colors.white,
          borderWidth: 1,
          borderColor: colors.orange,
        }]}
        onPress={() => toggleAppSelection(item.id)}
      >
        <View style={styles.iconContainer}>{item.icon}</View>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "white",
            alignSelf: "center",
            marginTop: 7,
            borderWidth: 1,
            borderColor: selectedApps.includes(item.id) ? colors.orange : "white",
          }}
        />
      </TouchableOpacity>
    );
  };

  return (
    <View>
      <FlatList
        data={appData}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderApp}
        numColumns={3}
        columnWrapperStyle={styles.column}
        contentContainerStyle={styles.grid}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  grid: {
    alignItems: "center",
  },
  column: {
    justifyContent: "space-between",
  },
  appContainer: {
    width: 75,
    height: 75,
    backgroundColor: colors.orange,
    borderRadius: 10,
    marginBottom: 20,
    justifyContent: "center",
    alignItems: "center",
    // position: "relative",
    marginHorizontal: 11,
  },
  iconContainer: {
    alignItems: "center",
  },
});

export default AppsOnboardingGrid;

================
File: src/lists/screen-time-list.tsx
================
import React from "react";
import { View, Text, StyleSheet, FlatList } from "react-native";
import data from "../../assets/data/mock-screen-time";

interface ScreenTimeListProps {
  // define your props here
}

const ScreenTimeList: React.FC<ScreenTimeListProps> = (props) => {
  const renderBar = (data) => {
    return (
      <View style={styles.barContainer}>
        <View style={[styles.totalBar]}>
          {data.map((item, index) => (
            <View
              key={index}
              style={[
                styles.barSegment,
                {
                  width: `${item.progress * 100}%`,
                  backgroundColor: item.color,
                },
              ]}
            />
          ))}
        </View>
        <Text style={styles.limitText}>2h limit</Text>
      </View>
    );
  };

  console.log(data);

  return (
    <View>
      {renderBar(data)}
      <FlatList
        data={data}
        keyExtractor={(item) => item.app}
        renderItem={({ item }) => (
          <View style={styles.appRow}>
            <View style={[styles.appIcon, { backgroundColor: item.color }]} />
            <View style={styles.appInfo}>
              <Text style={styles.appName}>{item.app}</Text>
              <Text style={styles.appTime}>{item.time}</Text>
            </View>
          </View>
        )}
        scrollEnabled={false}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  barContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 20,
    marginTop: 20,
  },
  totalBar: {
    flexDirection: "row",
    width: "80%",
    height: 30,
    backgroundColor: "#e0e0e0",
    borderRadius: 20,
    overflow: "hidden",
  },
  barSegment: {
    height: "100%",
  },
  limitText: {
    marginLeft: 10,
    color: "#F77E45",
    fontSize: 12,
  },
  appRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 20,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
  },
  appIcon: {
    width: 20,
    height: 20,
    borderRadius: 10,
    marginRight: 10,
  },
  appInfo: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  appName: {
    fontSize: 16,
    fontWeight: "500",
  },
  appTime: {
    fontSize: 14,
    fontWeight: "500",
  },
});

export default ScreenTimeList;

================
File: src/navigation/index.tsx
================
// File: src/navigation/index.tsx
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import HomeScreen from "../screens/home";
import SplashScreen from "../screens/onboarding";
import DetailsScreen from "../screens/details";
import LoginScreen from "../screens/onboarding/login";
import RegisterScreen from "../screens/onboarding/register";
import Instructions from "../screens/onboarding/instructions";

const Stack = createStackNavigator();

const AppNavigator = ({ initialRouteName }) => {
  return (
    <Stack.Navigator initialRouteName={initialRouteName}>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ headerShown: false, gestureEnabled: false }}
      />
      <Stack.Screen
        name="Splash"
        component={SplashScreen}
        options={{ headerShown: false }}
      />
      <Stack.Screen
        name="Instructions"
        component={Instructions}
        options={{
          headerShown: false,
          animationEnabled: false,
        }}
      />
      <Stack.Screen
        name="Details"
        component={DetailsScreen}
        options={{ headerShown: false }}
      />
      <Stack.Screen
        name="Login"
        component={LoginScreen}
        options={{
          headerShown: false,
          animationEnabled: false,
        }}
      />
      <Stack.Screen
        name="Register"
        component={RegisterScreen}
        options={{ headerShown: false, animationEnabled: false }}
      />
    </Stack.Navigator>
  );
};

export default AppNavigator;

================
File: src/screens/details/index.tsx
================
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  Image,
  ScrollView,
  TouchableOpacity,
} from "react-native";
import AppWrapper from "../../components/layout/app-wrapper";
import colors from "../../theme/colors";
import { SCREEN_WIDTH } from "../../utils/constants/dimensions";
import { Entypo, Feather, FontAwesome5 } from "@expo/vector-icons";

interface DetailsScreenProps {
  navigation: any;
}

const DetailsScreen: React.FC<DetailsScreenProps> = ({ navigation }) => {
  const handleGoBack = () => {
    navigation.goBack();
  };

  return (
    <AppWrapper>
      <TouchableOpacity
        onPress={handleGoBack}
        style={{
          flexDirection: "row",
          marginHorizontal: 20,
          marginBottom: 20,
          alignItems: "center",
        }}
      >
        <Entypo name="chevron-thin-left" size={16} color={colors.orange} />
        <Text
          style={{
            fontSize: 16,
            textTransform: "uppercase",
            color: colors.orange,
            marginLeft: 5,
          }}
        >
          Home
        </Text>
      </TouchableOpacity>

      <View style={{ marginHorizontal: 20 }}>
        <View
          style={{
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: 10,
          }}
        >
          <View
            style={{
              backgroundColor: colors.orange,
              paddingVertical: 8,
              paddingHorizontal: 11,
              borderRadius: 20,
              flexDirection: "row",
              alignItems: "center",
            }}
          >
            <Feather name="clock" size={18} color="white" />
            <Text style={{ color: "white", fontWeight: "500", marginLeft: 7 }}>
              21 days left
            </Text>
          </View>

          <View
            style={{
              backgroundColor: colors.white,
              paddingVertical: 8,
              paddingHorizontal: 11,
              borderRadius: 20,
              flexDirection: "row",
              alignItems: "center",
            }}
          >
            <FontAwesome5 name="fire-alt" size={18} color={colors.orange} />
            <Text
              style={{ color: colors.orange, fontWeight: "50", marginLeft: 7 }}
            >
              12
            </Text>
          </View>
        </View>

        <View
          style={{
            flexDirection: "row",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <View
            style={{ justifyContent: "space-between", alignItems: "center" }}
          >
            <Text style={{ fontWeight: "500", fontSize: 16, marginBottom: 10 }}>
              Daily journal
            </Text>
            <View
              style={{
                width: SCREEN_WIDTH * 0.42,
                backgroundColor: colors.white,
                paddingVertical: 12,
                borderRadius: 10,
                justifyContent: "center",
                alignItems: "center",
                shadowColor: "#000",
                shadowOffset: {
                  width: 0,
                  height: 1,
                },
                shadowOpacity: 0.2,
                shadowRadius: 1.41,

                elevation: 2,
              }}
            >
              <Image
                source={require("../../../assets/images/home/notebook.png")}
              />
            </View>
          </View>

          <View style={{ justifyContent: "center", alignItems: "center" }}>
            <Text style={{ fontWeight: "500", fontSize: 16, marginBottom: 10 }}>
              Pledge score
            </Text>
            <View
              style={{
                width: SCREEN_WIDTH * 0.42,
                backgroundColor: colors.white,
                paddingVertical: 12,
                borderRadius: 10,
                justifyContent: "center",
                alignItems: "center",
                shadowColor: "#000",
                shadowOffset: {
                  width: 0,
                  height: 1,
                },
                shadowOpacity: 0.2,
                shadowRadius: 1.41,

                elevation: 2,
              }}
            >
              <Image
                source={require("../../../assets/images/home/notebook.png")}
              />
            </View>
          </View>
        </View>

        <View
          style={{
            width: "100%",
            backgroundColor: "white",
            shadowColor: "#000",
            shadowOffset: {
              width: 0,
              height: 1,
            },
            shadowOpacity: 0.2,
            shadowRadius: 1.41,

            elevation: 2,
            borderRadius: 10,
            paddingVertical: 20,
            marginTop: 16,
          }}
        >
          <View
            style={{ flexDirection: "row", justifyContent: "space-around" }}
          >
            <View style={{ justifyContent: "center", alignItems: "center" }}>
              <Text
                style={{
                  fontSize: 32,
                  color: colors.orange,
                  fontWeight: "700",
                }}
              >
                1h 35min
              </Text>
              <Text style={{ marginTop: 4, fontWeight: "400" }}>
                Average screen time
              </Text>
            </View>

            <View style={{ justifyContent: "center", alignItems: "center" }}>
              <Text
                style={{
                  fontSize: 32,
                  color: colors.orange,
                  fontWeight: "700",
                }}
              >
                3h 09m
              </Text>
              <Text style={{ marginTop: 4, fontWeight: "400" }}>
                Average Time Saved
              </Text>
            </View>
          </View>
        </View>

        <Text style={{ fontWeight: "500", fontSize: 16, marginTop: 16 }}>
          Progress bar
        </Text>

        <Text style={{ fontWeight: "500", fontSize: 16, marginTop: 16 }}>
          Usage breakdown
        </Text>
      </View>
    </AppWrapper>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

export default DetailsScreen;

================
File: src/screens/home/index.tsx
================
import React, { useState, useEffect } from "react";
import { View, Text, StyleSheet, TouchableOpacity, NativeModules } from "react-native";
import AppWrapper from "../../components/layout/app-wrapper";
import MainHeader from "../../components/headers/main-header";
import HomeSwitch from "../../components/switches/home-switch";
import HomeCardWrapper from "../../components/cards/home-card-wrapper";
import colors from "../../theme/colors";
import ScreenTimeList from "../../lists/screen-time-list";
import { useNavigation } from "@react-navigation/native";
import CheckoutScreen from "../payment/pay-with-stripe";
import MainButton from "../../components/buttons/main-button";
import PaymentPopup from '../payment/payment-popup';


const { ScreenTimeBridge } = NativeModules;

interface HomeScreenProps {
  // define your props here
}

const HomeScreen: React.FC<HomeScreenProps> = (props) => {
  const navigation = useNavigation();
  const [openedTab, setOpenedTab] = useState("today");

  const [instagramUsage, setInstagramUsage] = useState("Loading...");

  useEffect(() => {
    fetchInstagramUsage();
  }, []);

  const fetchInstagramUsage = async () => {
    try {
      const usage = await ScreenTimeBridge.getInstagramUsage();
      setInstagramUsage(usage);
    } catch (error) {
      console.error("Error fetching Instagram usage:", error);
      setInstagramUsage("Unable to fetch data");
    }
  };

  const handleSurrender = () => {
    navigation.navigate("Instructions");
  };

  const handleOpenDetails = () => {
    navigation.navigate("Details");
  };

  const [showPaymentPopup, setShowPaymentPopup] = useState(false);
  const [selectedPrice, setSelectedPrice] = useState(10);
  const handlePaymentSuccess = () => {
    setShowPaymentPopup(false);
    // Add any additional logic after successful payment
  };

  return (
    <AppWrapper>
      <MainHeader />

      <HomeSwitch openedTab={openedTab} setOpenedTab={setOpenedTab} />
      

      {openedTab === "today" ? (
        <>
          <HomeCardWrapper style={{ marginTop: 25 }}>
            <View
              style={{
                flexDirection: "row",
                justifyContent: "space-evenly",
                alignItems: "center",
              }}
            >
              <View style={{ justifyContent: "center", alignItems: "center" }}>
                <Text style={{ fontSize: 36, color: colors.orange }}>19</Text>
                <Text
                  style={{
                    fontSize: 10,
                    color: "rgba(0, 0, 0, 0.70)",
                    textTransform: "uppercase",
                    textAlign: "center",
                  }}
                >
                  Days
                </Text>
              </View>

              <Text>:</Text>

              <View style={{ justifyContent: "center", alignItems: "center" }}>
                <Text style={{ fontSize: 36, color: colors.orange }}>12</Text>
                <Text
                  style={{
                    fontSize: 10,
                    color: "rgba(0, 0, 0, 0.70)",
                    textTransform: "uppercase",
                    textAlign: "center",
                  }}
                >
                  Hours
                </Text>
              </View>

              <Text>:</Text>

              <View style={{ justifyContent: "center", alignItems: "center" }}>
                <Text style={{ fontSize: 36, color: colors.orange }}>70</Text>
                <Text
                  style={{
                    fontSize: 10,
                    color: "rgba(0, 0, 0, 0.70)",
                    textTransform: "uppercase",
                    textAlign: "center",
                  }}
                >
                  Minutes
                </Text>
              </View>

              <Text>:</Text>

              <View style={{ justifyContent: "center", alignItems: "center" }}>
                <Text style={{ fontSize: 36, color: colors.orange }}>44</Text>
                <Text
                  style={{
                    fontSize: 10,
                    color: "rgba(0, 0, 0, 0.70)",
                    textTransform: "uppercase",
                    textAlign: "center",
                  }}
                >
                  Seconds
                </Text>
              </View>
            </View>
          </HomeCardWrapper>

          <HomeCardWrapper
            onPress={handleOpenDetails}
            style={{ marginTop: 17 }}
          >
            <Text style={{ fontSize: 48, fontWeight: "500" }}>1h 21m</Text>
            <Text style={{ fontSize: 15 }}>
              <Text style={{ fontWeight: "500" }}>39m</Text> less than yesterday
            </Text>

            <ScreenTimeList />
          </HomeCardWrapper>
          <HomeCardWrapper
            style={{
              marginVertical: 20,
            }}
          >
            <Text
              style={{fontWeight: "bold"}}
            >
              Total screen time on Instagram:
            </Text>
            <Text>{instagramUsage}</Text>
          </HomeCardWrapper>
          
        </>
      ) : (
        // <Text>Total</Text>
        <></>
      )}

      <TouchableOpacity
        onPress={handleSurrender}
        style={{ position: "absolute", bottom: 43, alignSelf: "center" }}
      >
        <Text
          style={{
            color: colors.orange,
            textDecorationLine: "underline",
            fontSize: 16,
          }}
        >
          I surrender
        </Text>
      </TouchableOpacity>
    </AppWrapper>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

export default HomeScreen;

================
File: src/screens/onboarding/setup/accept-terms.tsx
================
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  Image,
  ScrollView,
  Pressable,
} from "react-native";
import {
  SCREEN_HEIGHT,
  SCREEN_WIDTH,
} from "../../../utils/constants/dimensions";
import colors from "../../../theme/colors";

interface AcceptTermsProps {
  termsAccepted: boolean;
  setTermsAccepted: (value: boolean) => void;
}

const AcceptTerms: React.FC<AcceptTermsProps> = ({
  termsAccepted,
  setTermsAccepted,
}) => {
  return (
    <View>
      <Text
        style={{
          marginHorizontal: 21,
          color: colors.orange,
          marginTop: 20,
          fontSize: 24,
          fontWeight: "600",
        }}
      >
        Accept Terms
      </Text>

      <Text style={{ fontSize: 13, alignSelf: "center", marginTop: 15 }}>
        Official partner
      </Text>
      <Image
        style={{ width: SCREEN_WIDTH * 0.8, alignSelf: "center" }}
        source={require("../../../../assets/images/partners/make-a-wish-logo.png")}
        resizeMode="contain"
      />

      <ScrollView
        style={{
          height: SCREEN_HEIGHT * 0.5,
          marginHorizontal: 22,
          borderWidth: 1,
          borderColor: colors.black,
          backgroundColor: colors.white,
          marginTop: 25,
        }}
      >
        <Text style={{ marginHorizontal: 21, marginTop: 20, fontSize: 14, textAlign: 'left', lineHeight: 24 }}>
          1. Acceptance of Terms{"\n"}
          By accessing and using this app, you accept and agree to be bound by the terms and provision of this agreement. In addition, when using this app, you shall be subject to any posted guidelines or rules applicable to such services. Any participation in this service will constitute acceptance of this agreement. If you do not agree to abide by the above, please do not use this service.{"\n\n"}
          2. Privacy Policy{"\n"}
          We respect your privacy and are committed to protecting it. Our Privacy Policy, which explains how we collect, use, and disclose information, is hereby incorporated by reference into these Terms of Service.{"\n\n"}
          3. User Conduct{"\n"}
          You agree to use the app only for lawful purposes. You agree not to take any action that might compromise the security of the app, render the app inaccessible to others, or otherwise cause damage to the app or its content.{"\n\n"}
          4. Intellectual Property{"\n"}
          The app and its original content, features, and functionality are and will remain the exclusive property of the app developers and its licensors. The app is protected by copyright, trademark, and other laws of both the United States and foreign countries.{"\n\n"}
          5. Termination{"\n"}
          We may terminate or suspend access to our app immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach the Terms.{"\n\n"}
          6. Limitation of Liability{"\n"}
          In no event shall the app developers, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential, or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your use or inability to use the app; (ii) any unauthorized access to or use of our servers and/or any personal information stored therein.{"\n\n"}
          7. Governing Law{"\n"}
          These Terms shall be governed and construed in accordance with the laws of the State of California, United States, without regard to its conflict of law provisions.{"\n\n"}
          8. Changes to Terms{"\n"}
          We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material, we will try to provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion.{"\n\n"}
          9. Contact Us{"\n"}
          If you have any questions about these Terms, please contact us at thebettobreakfree@gmail.com.
        </Text>
      </ScrollView>

      <View
        style={{
          flexDirection: "row",
          alignItems: "center",
          marginHorizontal: 21,
          marginTop: 27,
        }}
      >
        <Pressable
          onPress={() => setTermsAccepted(!termsAccepted)}
          style={{
            width: 20,
            height: 20,
            borderRadius: 5,
            borderWidth: 1,
            borderColor: colors.orange,
            backgroundColor: termsAccepted ? colors.orange : "transparent",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          {termsAccepted && (
            <Text
              style={{
                color: colors.white,
                fontSize: 12,
                textAlign: "center",
                lineHeight: 20,
              }}
            >
              ✓
            </Text>
          )}
        </Pressable>
        <Text style={{ marginLeft: 7, fontWeight: "400" }}>
          I Agree to the{" "}
          <Text style={{ textDecorationLine: "underline" }}>
            Terms and Conditions
          </Text>
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

export default AcceptTerms;

================
File: src/screens/onboarding/setup/challenge-on.tsx
================
import React from "react";
import { View, Text, StyleSheet, Image } from "react-native";

interface ChallengeOnProps {
  // define your props here
}

const ChallengeOn: React.FC<ChallengeOnProps> = (props) => {
  return (
    <View>
      <Image
        source={require("../../../../assets/images/onboarding/challenge-on.png")}
        style={{ alignSelf: "center", marginTop: 59 }}
      />

      <Text
        style={{
          fontSize: 30,
          fontWeight: "600",
          textAlign: "center",
          marginTop: 40,
        }}
      >
        Challenge On!
      </Text>
      <Text
        style={{
          fontFamily: "InstrumentSerif-Regular",
          textAlign: "center",
          marginTop: 15,
          marginHorizontal: 30,
        }}
      >
        Take control of your time. Let the challenge begin!
      </Text>
    </View>
  );
};

export default ChallengeOn;

================
File: src/screens/onboarding/setup/set-apps.tsx
================
import React from "react";
import { View, Text, StyleSheet } from "react-native";
import colors from "../../../theme/colors";
import AppsOnboardingGrid from "../../../lists/apps-onboarding-grid";

interface SetAppsProps {
  isButtonDisabled: boolean;
  setIsButtonDisabled: (value: boolean) => void;
  selectedApps: [];
  setSelectedApps: (value: []) => void;
}

const SetApps: React.FC<SetAppsProps> = ({
  isButtonDisabled,
  setIsButtonDisabled,
  selectedApps,
  setSelectedApps,
}) => {
  return (
    <View style={{ flex: 1, marginTop: 69 }}>
      <Text
        style={{
          marginBottom: 31,
          textAlign: "center",
          fontSize: 24,
          fontWeight: "500",
        }}
      >
        The <Text style={{ color: colors.orange }}>Pledge</Text> includes
      </Text>
      <AppsOnboardingGrid
        selectedApps={selectedApps}
        setSelectedApps={setSelectedApps}
      />

      <Text
        style={{
          marginTop: 69,
          marginHorizontal: 34,
          textAlign: "center",
          fontSize: 16,
          fontFamily: "InstrumentSerif-Regular",
        }}
      >
        Pick the apps that steal your time, and reclaim it for what matters.
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

export default SetApps;

================
File: src/screens/onboarding/setup/set-pledge.tsx
================
import React from "react";
import { View, Text, StyleSheet } from "react-native";
import SetSlider from "../../../components/sliders/set-slider";

interface SetPledgeProps {
  isButtonDisabled: boolean;
  setIsButtonDisabled: (value: boolean) => void;
  pledgeValue: number;
  setPledgeValue: (value: number) => void;
}

const SetPledge: React.FC<SetPledgeProps> = ({
  isButtonDisabled,
  setIsButtonDisabled,
  pledgeValue,
  setPledgeValue,
}) => {
  return (
    <View style={styles.setPledgeContainer}>
      <Text style={styles.title}>How Much Do You Pledge?</Text>

      <View style={styles.pledgeContainer}>
        <Text style={styles.xxText}>{pledgeValue}</Text>
        <Text style={styles.dollarSign}>$</Text>
      </View>

      <SetSlider
        min={10}
        max={1000}
        onValueChange={(value) => setPledgeValue(value)}
      />

      <Text
        style={{
          marginTop: 69,
          marginHorizontal: 34,
          textAlign: "center",
          fontSize: 16,
          fontFamily: "InstrumentSerif-Regular",
        }}
      >
        The higher your pledge, the greater your commitment—and the bigger the
        impact.
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  setPledgeContainer: {
    marginTop: 69,
    alignItems: "center",
    justifyContent: "center",
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    marginBottom: 77,
    color: "#333",
  },
  pledgeContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 30,
  },
  xxText: {
    fontSize: 100,
    color: "#ccc",
    fontWeight: "500",
  },
  dollarSign: {
    fontSize: 100,
    color: "#333",
    fontWeight: "500",
    borderBottomWidth: 3,
    borderBottomColor: "#1E90FF",
  },
  slider: {
    width: "90%",
    height: 40,
  },
});

export default SetPledge;

================
File: src/screens/onboarding/setup/set-time-limit.tsx
================
import React from "react";
import { View, Text, StyleSheet } from "react-native";
import SetSlider from "../../../components/sliders/set-slider";

interface SetTimeLimitProps {
  isButtonDisabled: boolean;
  setIsButtonDisabled: (value: boolean) => void;
  timeValue: number;
  setTimeValue: (value: number) => void;
}

const SetTimeLimit: React.FC<SetTimeLimitProps> = ({
  isButtonDisabled,
  setIsButtonDisabled,
  timeValue,
  setTimeValue,
}) => {
  return (
    <View style={styles.setPledgeContainer}>
      <Text style={styles.title}>
        Choose Your Time Limit{" "}
        <Text style={{ fontSize: 12, fontWeight: "400" }}>(Per Day)</Text>
      </Text>

      <View style={styles.pledgeContainer}>
        <Text style={styles.xxText}>{timeValue}</Text>
        <Text style={styles.dollarSign}>m</Text>
      </View>

      <SetSlider
        min={10}
        max={120}
        onValueChange={(value) => setTimeValue(value)}
      />

      <Text
        style={{
          marginTop: 69,
          marginHorizontal: 34,
          textAlign: "center",
          fontSize: 16,
          fontFamily: "InstrumentSerif-Regular",
        }}
      >
        Remember, every minute saved is a step closer to your goals
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  setPledgeContainer: {
    marginTop: 69,
    alignItems: "center",
    justifyContent: "center",
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: "500",
    marginBottom: 77,
    color: "#333",
  },
  pledgeContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 30,
  },
  xxText: {
    fontSize: 100,
    color: "#ccc",
    fontWeight: "500",
  },
  dollarSign: {
    fontSize: 100,
    color: "#333",
    fontWeight: "500",
    borderBottomWidth: 3,
    borderBottomColor: "#1E90FF",
  },
  slider: {
    width: "90%",
    height: 40,
  },
});

export default SetTimeLimit;

================
File: src/screens/onboarding/setup/set-up-payment.tsx
================
import React, { useEffect, useState } from "react";
import { View, Text, Alert } from "react-native";
import colors from "../../../theme/colors";
import MainButton from "../../../components/buttons/main-button";
import { useStripe } from "@stripe/stripe-react-native";
import { fetchPaymentSheetParams } from "../../../services/stripe-api";
import { auth } from '../../../../firebaseConfig'; // ensure this is correct

interface SetPaymentProps {
  isButtonDisabled: boolean;
  setIsButtonDisabled: (disabled: boolean) => void;
  paymentSetupComplete: boolean;
  setPaymentSetupComplete: (complete: boolean) => void;
}

const SetPayment: React.FC<SetPaymentProps> = ({
  isButtonDisabled,
  setIsButtonDisabled,
  paymentSetupComplete,
  setPaymentSetupComplete
}) => {
  const { initPaymentSheet, presentPaymentSheet } = useStripe();
  const [loading, setLoading] = useState(false);

  const initializePaymentSheet = async (): Promise<boolean> => {
    try {
      const user = auth.currentUser;
      if (!user) {
        console.error('User not authenticated. Cannot fetch payment sheet params.');
        return false;
      }

      const idToken = await user.getIdToken();
      const { setupIntent, ephemeralKey, customer, error } = await fetchPaymentSheetParams(idToken);
      if (error) {
        console.error("Error fetching payment sheet params:", error);
        return false;
      }

      const { error: initError } = await initPaymentSheet({
        merchantDisplayName: "Pledge, Inc.",
        customerId: customer,
        customerEphemeralKeySecret: ephemeralKey,
        setupIntentClientSecret: setupIntent,
        applePay: {
          merchantCountryCode: 'ES',
        },
      });

      if (initError) {
        console.error("Error initializing payment sheet:", initError);
        return false;
      }

      // Initialization succeeded
      return true;
    } catch (err) {
      console.error("Error initializing payment sheet:", err);
      return false;
    }
  };

  const openPaymentSheet = async () => {
    const { error } = await presentPaymentSheet();

    if (error) {
      Alert.alert(`Error code: ${error.code}`, error.message);
    } else {
      Alert.alert("Success", "Your payment method is successfully set up for future payments!");
      setPaymentSetupComplete(true);
    }
  };

  const handleSetUpPayment = async () => {
    setLoading(true);
    const initialized = await initializePaymentSheet();
    setLoading(false);

    if (initialized) {
      openPaymentSheet();
    }
  };

  useEffect(() => {
    setIsButtonDisabled(!paymentSetupComplete);
  }, [paymentSetupComplete, setIsButtonDisabled]);

  return (
    <View>
      <Text
        style={{
          marginHorizontal: 21,
          color: colors.orange,
          marginTop: 50,
          fontSize: 24,
          textAlign: "center",
          fontWeight: "600",
        }}
      >
        Set Up Your Payment
      </Text>

      <View style={{ marginVertical: 20, paddingVertical: 10 }}>
        <MainButton
          onPress={handleSetUpPayment}
          text={paymentSetupComplete ? "Update Payment Method" : "Set Up Payment"}
          style={{ opacity: loading ? 0.5 : 1 }}
          disabled={loading}
        />
        {paymentSetupComplete && (
          <Text
            style={{
              color: colors.orange,
              textAlign: 'center',
              marginTop: 50,
              fontSize: 20,
              fontWeight: '600',
              paddingHorizontal: 100,
            }}
          >
            We've received your payment method. You're all set!
          </Text>
        )}
      </View>
    </View>
  );
};

export default SetPayment;

================
File: src/screens/onboarding/index.tsx
================
import React from "react";
import { Text, StyleSheet, ImageBackground, View } from "react-native";
import { SCREEN_WIDTH, SCREEN_HEIGHT } from "../../utils/constants/dimensions";
import Onboarding from "./onboarding";

interface SplashScreenProps {
  // define your props here
}

const SplashScreen: React.FC<SplashScreenProps> = (props) => {
  return (
    <Onboarding />
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});

export default SplashScreen;

================
File: src/screens/onboarding/instructions.tsx
================
import React, { useCallback, useState } from "react";
import { View, Text, TouchableOpacity } from "react-native";
import AppWrapper from "../../components/layout/app-wrapper";
import MainHeader from "../../components/headers/main-header";
import MainButton from "../../components/buttons/main-button";
import colors from "../../theme/colors";
import { useFocusEffect, useNavigation } from "@react-navigation/native";
import SetPledge from "./setup/set-pledge";
import ChallengeOn from "./setup/challenge-on";
import SetTimeLimit from "./setup/set-time-limit";
import SetApps from "./setup/set-apps";
import InstructionCarousel from "../../components/carousels/instructions-carousel";
import AcceptTerms from "./setup/accept-terms";
import SetPayment from "./setup/set-up-payment"; // Import the new component


interface InstructionsProps {
  // define your props here
}

const Instructions: React.FC<InstructionsProps> = (props) => {
  const navigation = useNavigation();
  const [step, setStep] = useState<Number>(0);
  const [isButtonDisabled, setIsButtonDisabled] = useState<Boolean>(false);

  const [pledgeValue, setPledgeValue] = useState<Number>(10);
  const [timeValue, setTimeValue] = useState<Number>(10);
  const [selectedApps, setSelectedApps] = useState([]);
  const [termsAccepted, setTermsAccepted] = useState<Boolean>(false);

  const [paymentSetupComplete, setPaymentSetupComplete] = useState(false);

  useFocusEffect(
    useCallback(() => {
      // Reset the step to 0 when the screen is focused
      setStep(0);
    }, [])
  );

  return (
    <AppWrapper>
      {step !== 4 && <MainHeader />}

      {step === 0 ? (
        <InstructionCarousel />
      ) : step == 1 ? (
        <SetPledge
          isButtonDisabled={isButtonDisabled}
          setIsButtonDisabled={setIsButtonDisabled}
          pledgeValue={pledgeValue}
          setPledgeValue={setPledgeValue}
        />
      ) : step == 2 ? (
        <SetTimeLimit
          isButtonDisabled={isButtonDisabled}
          setIsButtonDisabled={setIsButtonDisabled}
          timeValue={timeValue}
          setTimeValue={setTimeValue}
        />
      ) : step == 3 ? (
        <SetApps
          isButtonDisabled={isButtonDisabled}
          setIsButtonDisabled={setIsButtonDisabled}
          selectedApps={selectedApps}
          setSelectedApps={setSelectedApps}
        />
      ) : step == 4 ? (
        <AcceptTerms
          isButtonDisabled={isButtonDisabled}
          setIsButtonDisabled={setIsButtonDisabled}
          termsAccepted={termsAccepted}
          setTermsAccepted={setTermsAccepted}
        />
      ) : step == 5 ? (
        <SetPayment
          isButtonDisabled={isButtonDisabled}
          setIsButtonDisabled={setIsButtonDisabled}
          paymentSetupComplete={paymentSetupComplete}
          setPaymentSetupComplete={setPaymentSetupComplete}
        />
      ) : step == 6 ? ( // Add the new step condition
        <ChallengeOn />
      ) : null}

      <View
        style={{
          position: "absolute",
          bottom: step == 5 || step == 0 ? 71 : 38,
          zIndex: 100,
          alignSelf: "center",
        }}
      >
        <MainButton
          onPress={() => {
            if (step == 6) {
              navigation.navigate("Home");
            } else {
              setStep(step + 1);
            }
          }}
          text={step == 6 ? "Track My Pledge" : "Continue"}
          style={{ width: 162 }}
        />
        {step !== 6 && step > 0 ? (
          <TouchableOpacity
            onPress={() => {
              setStep(step - 1);
            }}
          >
            <Text
              style={{
                textDecorationLine: "underline",
                color: colors.orange,
                textAlign: "center",
                marginTop: 16,
              }}
            >
              Go Back
            </Text>
          </TouchableOpacity>
        ) : null}
      </View>
    </AppWrapper>
  );
};

export default Instructions;

================
File: src/screens/onboarding/login.tsx
================
// File: src/screens/onboarding/login.tsx
import React, { useState } from "react";
import { Text, Image, TouchableOpacity, TextInput, View, Alert } from "react-native";
import OnboardingWrapper from "../../components/layout/app-wrapper";
import MainHeader from "../../components/headers/main-header";
import AppWrapper from "../../components/layout/app-wrapper";
import { Feather } from "@expo/vector-icons";
import colors from "../../theme/colors";
import { useNavigation } from "@react-navigation/native";
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../../../firebaseConfig';

interface LoginScreenProps {}

const LoginScreen: React.FC<LoginScreenProps> = () => {
  const navigation = useNavigation();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleLogin = async () => {
    try {
      await signInWithEmailAndPassword(auth, email, password);
      navigation.navigate("Instructions");
    } catch (error) {
      console.error("Login Error:", error);
      Alert.alert("Login failed", error.message || "An error occurred");
    }
  };

  const handleNavigateRegister = () => {
    navigation.navigate("Register");
  };

  return (
    <AppWrapper>
      <MainHeader />

      <View
        style={{
          borderBottomWidth: 1,
          borderBottomColor: "#929292",
          marginHorizontal: 38,
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "space-between",
          marginTop: 90,
        }}
      >
        <TextInput
          placeholder="Enter Your Email"
          style={{ marginVertical: 12, width: "80%" }}
          placeholderTextColor={"#929292"}
          value={email}
          onChangeText={setEmail}
        />
        </View>
        <View
          style={{
            borderBottomWidth: 1,
            borderBottomColor: "#929292",
            marginHorizontal: 38,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-between",
            marginTop: 20,
          }}
        >
        <TextInput
          placeholder="Enter Your Password"
          style={{ marginVertical: 12, width: "80%" }}
          placeholderTextColor={"#929292"}
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />
        <TouchableOpacity onPress={handleLogin}>
          <Feather name="chevron-right" size={20} color={colors.orange} />
        </TouchableOpacity>
      </View>

      <TouchableOpacity onPress={handleNavigateRegister}>
        <Text style={{ color: colors.orange, textAlign: "center", marginTop: 20 }}>
          Don't have an account? Sign Up
        </Text>
      </TouchableOpacity>

      <Image
        source={require("../../../assets/images/onboarding/login-phone.png")}
        style={{ position: "absolute", alignSelf: "center", bottom: 0 }}
      />
    </AppWrapper>
  );
};

export default LoginScreen;

================
File: src/screens/onboarding/onboarding.tsx
================
// File: src/screens/onboarding/onboarding.tsx
// src/screens/onboarding/onboarding.tsx

import React, { useState } from "react";
import { StyleSheet, ImageBackground, View, Text } from "react-native";
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
} from "react-native-reanimated";
import { SCREEN_HEIGHT, SCREEN_WIDTH } from "../../utils/constants/dimensions";
import SplashSlider from "../../components/sliders/splash-slider";
import OnboardingMenIcon from "../../../assets/icons/onboarding-men-icon";
import MainButton from "../../components/buttons/main-button";
import OnboardingMenIconHarmsOpen from "../../../assets/icons/onboarding-men-icon-harms-open";
import SecondaryButton from "../../components/buttons/secondary-button";
import colors from "../../theme/colors";
import { useNavigation, NavigationProp } from "@react-navigation/native";
import { RootStackParamList } from "../../navigation/types"; // Ensure you have defined your navigation types

const Onboarding: React.FC = () => {
  // Define navigation with proper typing
  const navigation = useNavigation<NavigationProp<RootStackParamList>>();

  const [isPledged, setIsPledged] = useState(false);
  const [iconSwitched, setIconSwitched] = useState(false);

  // Animation values
  const topValue = useSharedValue(SCREEN_HEIGHT / 2 - 100);
  const sliderOpacity = useSharedValue(1);
  const fontSize1 = useSharedValue(100);
  const fontSize2 = useSharedValue(19.2);
  const letterSpacing2 = useSharedValue(0.29);

  // Animated styles
  const textAnimatedStyle = useAnimatedStyle(() => {
    return {
      top: withTiming(isPledged ? 75 : SCREEN_HEIGHT / 2 - 100, {
        duration: 500,
      }),
      position: "absolute",
      width: SCREEN_WIDTH,
      alignItems: "center",
    };
  });

  const font1AnimatedStyle = useAnimatedStyle(() => {
    return {
      fontSize: withTiming(isPledged ? 35 : 100, { duration: 500 }),
      fontWeight: isPledged ? "700" : "800",
    };
  });

  const font2AnimatedStyle = useAnimatedStyle(() => {
    return {
      fontSize: withTiming(isPledged ? 12 : 19.2, { duration: 500 }),
      letterSpacing: withTiming(isPledged ? 4 : 7, { duration: 500 }),
      fontWeight: "400",
      marginTop: withTiming(isPledged ? 4 : 5, { duration: 500 }),
      color: withTiming(isPledged ? colors.orange : colors.black, {
        duration: 500,
      }),
    };
  });

  const sliderAnimatedStyle = useAnimatedStyle(() => {
    return {
      opacity: withTiming(isPledged ? 0 : 1, { duration: 500 }),
    };
  });

  const backgroundOpacityStyle = useAnimatedStyle(() => {
    return {
      opacity: withTiming(isPledged ? 0 : 1, { duration: 500 }),
    };
  });

  const backgroundColorStyle = useAnimatedStyle(() => {
    return {
      backgroundColor: withTiming(isPledged ? "#FFF6F1" : "transparent", {
        duration: 500,
      }),
    };
  });

  // Handler for making a pledge
  const handlePledge = () => {
    setIsPledged(true);
    setTimeout(() => setIconSwitched(true), 500);
  };

  // Handler for navigating to Login
  const handleNavigateLogin = () => {
    navigation.navigate("Login");
  };

  // **New Handler for Navigating to Register**
  const handleNavigateRegister = () => {
    navigation.navigate("Register");
  };

  return (
    <Animated.View style={[styles.container, backgroundColorStyle]}>
      {!isPledged ? (
        <Animated.View style={[backgroundOpacityStyle, { flex: 1 }]}>
          <ImageBackground
            source={require("../../../assets/images/onboarding/onboarding-background-1.png")}
            style={{
              flex: 1,
              width: SCREEN_WIDTH,
              height: SCREEN_HEIGHT,
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <Animated.View style={[textAnimatedStyle]}>
              <Animated.Text
                style={[font1AnimatedStyle, { color: "white" }]}
              >
                Pledge
              </Animated.Text>
              <Animated.Text
                style={[font2AnimatedStyle, { color: "white" }]}
              >
                the bet to break free
              </Animated.Text>
            </Animated.View>
          </ImageBackground>
        </Animated.View>
      ) : (
        <View
          style={{
            flex: 1,
            justifyContent: "center",
            alignItems: "center",
            backgroundColor: "#FFF6F1",
          }}
        >
          {iconSwitched ? (
            <OnboardingMenIconHarmsOpen
              width={SCREEN_WIDTH}
              height={SCREEN_HEIGHT * 0.4}
              style={{ position: "absolute", bottom: 0 }}
            />
          ) : (
            <OnboardingMenIcon
              width={SCREEN_WIDTH}
              height={SCREEN_HEIGHT}
              style={{ position: "absolute", bottom: 65 }}
            />
          )}

          <Animated.View style={[textAnimatedStyle]}>
            <Animated.Text
              style={[font1AnimatedStyle, { color: "white" }]}
            >
              Pledge
            </Animated.Text>
            <Animated.Text
              style={[font2AnimatedStyle, { color: "white" }]}
            >
              the bet to break free
            </Animated.Text>
            {iconSwitched ? (
              <>
                <Text
                  style={{
                    marginTop: 62,
                    marginBottom: 40,
                    fontSize: 22,
                    fontWeight: "500",
                  }}
                >
                  Welcome!
                </Text>
                <MainButton
                  onPress={handleNavigateLogin}
                  text="Login"
                  style={{ width: 230 }}
                />

                <SecondaryButton
                  onPress={handleNavigateRegister} // **Added onPress Handler**
                  text="Sign Up"
                  style={{ width: 230, marginTop: 22 }}
                />
              </>
            ) : (
              <>
                <View style={{ marginTop: 60 }}>
                  <Text
                    style={{
                      textAlign: "center",
                      fontWeight: "500",
                      fontSize: 24,
                    }}
                  >
                    Your time, your choice
                  </Text>
                  <Text
                    style={{
                      textAlign: "center",
                      fontWeight: "600",
                      fontSize: 24,
                      color: colors.white,
                    }}
                  >
                    Start your challenge now.
                  </Text>

                  <View style={{ marginTop: 20 }}>
                    <MainButton onPress={handlePledge} text="Make A Pledge" />
                  </View>
                </View>
              </>
            )}
          </Animated.View>
        </View>
      )}

      <Animated.View
        style={[
          sliderAnimatedStyle,
          { position: "absolute", bottom: 106, alignSelf: "center" },
        ]}
      >
        <SplashSlider isPledged={isPledged} setIsPledged={setIsPledged} />
      </Animated.View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    width: SCREEN_WIDTH,
    height: SCREEN_HEIGHT,
  },
});

export default Onboarding;

================
File: src/screens/onboarding/register.tsx
================
// File: src/screens/onboarding/register.tsx
import React, { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { signUp } from "../../services/auth";
import MainHeader from "../../components/headers/main-header";
import AppWrapper from "../../components/layout/app-wrapper";

const RegisterScreen: React.FC = () => {
  const navigation = useNavigation();
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSignUp = async () => {
    try {
      await signUp(email, password, name);
      Alert.alert("Success", "Registration complete!");
      navigation.navigate("Instructions"); // Navigate to Instructions screen
    } catch (error) {
      console.error("Sign-up Error:", error);
      Alert.alert("Registration failed", error.message || "An error occurred");
    }
  };

  return (
    <AppWrapper>
      <MainHeader />
      <View style={styles.container}>
        <Text style={styles.title}>Register</Text>
        <TextInput
          style={styles.input}
          placeholder="Enter Your Name"
          value={name}
          onChangeText={setName}
        />
        <TextInput
          style={styles.input}
          placeholder="Enter Your Email"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />
        <TextInput
          style={styles.input}
          placeholder="Enter Your Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />
        <TouchableOpacity style={styles.button} onPress={handleSignUp}>
          <Text style={styles.buttonText}>Sign Up</Text>
        </TouchableOpacity>
      </View>
    </AppWrapper>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    padding: 16,
    marginTop: 100,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 24,
    textAlign: "center",
  },
  input: {
    height: 40,
    borderColor: "#ccc",
    borderWidth: 1,
    marginBottom: 12,
    paddingHorizontal: 8,
  },
  button: {
    backgroundColor: "#FF5900",
    paddingVertical: 12,
    alignItems: "center",
    borderRadius: 8,
  },
  buttonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default RegisterScreen;

================
File: src/screens/payment/pay-with-stripe.tsx
================
// import React, { useState, useEffect } from 'react';
// import { View, Button, Text, Alert } from 'react-native';
// import { CardField, useConfirmPayment, useStripe } from '@stripe/stripe-react-native';

// export default function CheckoutScreen() {
//   const { initPaymentSheet, presentPaymentSheet } = useStripe();
//   const [loading, setLoading] = useState(false);

//   const fetchPaymentSheetParams = async () => {
//     const response = await fetch(`/payment-sheet`, {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//       },
//     });
//     const { setupIntent, ephemeralKey, customer } = await response.json();

//     return {
//       setupIntent,
//       ephemeralKey,
//       customer,
//     };
//   };

//   const initializePaymentSheet = async () => {
//     const { setupIntent, ephemeralKey, customer } = await fetchPaymentSheetParams();

//     const { error } = await initPaymentSheet({
//       merchantDisplayName: "Example, Inc.",
//       customerId: customer,
//       customerEphemeralKeySecret: ephemeralKey,
//       setupIntentClientSecret: setupIntent,
//     });
//     if (!error) {
//       setLoading(true);
//     }
//   };

//   const openPaymentSheet = async () => {
//     const { error } = await presentPaymentSheet();

//     if (error) {
//       Alert.alert(`Error code: ${error.code}`, error.message);
//     } else {
//       Alert.alert('Success', 'Your payment method is successfully set up for future payments!');
//     }
//   };

//   useEffect(() => {
//     initializePaymentSheet();
//   }, []);

//   return (
//     <View>
//       <Button
//         disabled={!loading}
//         title="Set up"
//         onPress={openPaymentSheet}
//       />
//     </View>
//   );
// }

// // const PaymentScreen = () => {
// //     const [cardDetails, setCardDetails] = useState();
// //     const { confirmPayment, loading } = useConfirmPayment();
  
// //     const handlePayPress = async () => {
// //       // Assume you have a server endpoint to create PaymentIntent
// //       const { clientSecret, error } = await fetchPaymentIntentClientSecret();
  
// //       if (error) {
// //         alert(`Payment failed: ${error.message}`);
// //         return;
// //       }
  
// //       const { paymentIntent, error: confirmError } = await confirmPayment(clientSecret, {
// //         type: 'Card',
// //         billingDetails: { email: 'email@example.com' }, // Add user billing details if needed
// //       });
  
// //       if (confirmError) {
// //         alert(`Payment failed: ${confirmError.message}`);
// //       } else if (paymentIntent) {
// //         alert('Payment successful!');
// //       }
// //     };
  
// //     return (
// //       <View>
// //         <CardField
// //           postalCodeEnabled={true}
// //           placeholder={{ number: '4242 4242 4242 4242' }}
// //           onCardChange={(cardDetails) => setCardDetails(cardDetails)}
// //           cardStyle={{ backgroundColor: '#FFFFFF', textColor: '#000000' }}
// //           style={{ width: '100%', height: 50, marginVertical: 30 }}
// //         />
// //         <Button onPress={handlePayPress} title="Complete Payment" disabled={loading} />
// //       </View>
// //     );
// // };

// // export default PaymentScreen;

================
File: src/screens/payment/payment-popup.tsx
================
// import React, { useState, useRef, useEffect } from 'react';
// import {
//   View,
//   Text,
//   Modal,
//   StyleSheet,
//   TouchableOpacity,
//   Dimensions,
//   Animated,
// } from 'react-native';
// import {
//   useStripe,
//   CardForm,
// } from '@stripe/stripe-react-native';
// import MainButton from '../../components/buttons/main-button';

// const PaymentPopup = ({ isVisible, onClose, onPaymentSuccess }) => {
//   const stripe = useStripe();
//   const fadeAnim = useRef(new Animated.Value(0)).current;
//   const slideAnim = useRef(new Animated.Value(Dimensions.get('window').height)).current;
//   const [loading, setLoading] = useState(false);
//   const mockMode = true; // Toggle mock mode for testing

//   const [pledgePrice, setPledgePrice] = useState(0);

//   const API_URL = "https://api.stripe.com/v1";

//   const animatePopup = (visible) => {
//     const toValue = visible ? 0 : Dimensions.get('window').height;

//     Animated.parallel([
//       Animated.timing(fadeAnim, {
//         toValue: visible ? 1 : 0,
//         duration: 300,
//         useNativeDriver: true,
//       }),
//       Animated.spring(slideAnim, {
//         toValue,
//         tension: 65,
//         friction: 11,
//         useNativeDriver: true,
//       }),
//     ]).start(() => {
//       if (!visible) onClose(); // Close the modal after animation ends
//     });
//   };

//   useEffect(() => {
//     animatePopup(isVisible);
//   }, [isVisible]);

//   const fetchPaymentSheetParams = async () => {
//     const response = await fetch(`${API_URL}/payment-sheet`, {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//       },
//     });
//     const { setupIntent, ephemeralKey, customer } = await response.json();

//     return {
//       setupIntent,
//       ephemeralKey,
//       customer,
//     };
//   };

//   const initializePaymentSheet = async () => {
//     setLoading(true);
//     try {
//       const { setupIntent, ephemeralKey, customer } = await fetchPaymentSheetParams();

//       const { error } = await stripe.initPaymentSheet({
//         merchantDisplayName: "Your Merchant Name",
//         customerId: customer,
//         customerEphemeralKeySecret: ephemeralKey,
//         setupIntentClientSecret: setupIntent,
//         returnURL: "yourapp://payment-complete",
//         paymentMethodTypes: ['apple_pay'], // Add other payment methods as required
//         applePay: {
//           merchantCountryCode: 'US',
//         },
//       });

//       if (error) {
//         console.error("Error initializing payment sheet:", error);
//       } else {
//         console.log("Payment sheet initialized successfully");
//       }
//     } catch (error) {
//       console.error("Error during initialization:", error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleApplePayPress = async () => {
//     try {
//       const { error } = await stripe.presentApplePay({
//         cartItems: [
//           { label: 'Pledge', amount: pledgePrice },
//           { label: 'Total', amount: pledgePrice },
//         ],
//         country: 'ES',
//         currency: 'EUR',
//       });

//       if (error) {
//         console.error(error);
//       } else {
//         console.log('Apple Pay payment successful');
//         onPaymentSuccess(); // Notify parent component of success
//       }
//     } catch (error) {
//       console.error('Error during Apple Pay:', error);
//     }
//   };

//   const openPaymentSheet = async () => {
//     setLoading(true);
//     if (mockMode) {
//       console.log("Mock: Opening Payment Sheet...");
//       const success = true; // Simulated result
//       if (success) {
//         console.log("Mock: Payment completed successfully!");
//         onPaymentSuccess();
//       } else {
//         console.error("Mock: Payment failed!");
//       }
//       setLoading(false);
//       return;
//     }

//     try {
//       const { error } = await stripe.presentPaymentSheet();
//       if (error) {
//         console.error("Error opening payment sheet:", error);
//       } else {
//         onPaymentSuccess();
//       }
//     } catch (error) {
//       console.error("Error during payment sheet interaction:", error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <Modal
//       transparent
//       visible={isVisible}
//       onRequestClose={onClose}
//       animationType="none"
//     >
//       <View style={styles.container}>
//         <Animated.View style={[styles.overlay, { opacity: fadeAnim }]}>
//           <TouchableOpacity style={styles.overlayTouch} onPress={() => animatePopup(false)} />
//         </Animated.View>

//         <Animated.View style={[styles.popup, { transform: [{ translateY: slideAnim }] }]}>
//           <View style={styles.header}>
//             <Text style={styles.title}>Set Up Payment Method</Text>
//             <TouchableOpacity onPress={() => animatePopup(false)} style={styles.closeButton}>
//               <Text style={styles.closeText}>×</Text>
//             </TouchableOpacity>
//           </View>

//           <MainButton text="Pay with Apple Pay" onPress={handleApplePayPress} />

//           <View style={styles.content}>
//             <Text style={styles.description}>Please enter your payment details below:</Text>
//             <View style={styles.cardFormContainer}>
//               <CardForm
//                 style={styles.cardForm}
//                 onFormComplete={(cardDetails) => {
//                   console.log("Card details entered:", cardDetails);
//                 }}
//               />
//             </View>
//           </View>

//           <View style={styles.content}>
//             <MainButton
//               onPress={openPaymentSheet}
//               text="Submit"
//               style={[{ opacity: loading ? 1 : 0.5 }]}
//               disabled={!loading}
//             />
//           </View>
//         </Animated.View>
//       </View>
//     </Modal>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//   },
//   overlay: {
//     ...StyleSheet.absoluteFillObject,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//   },
//   overlayTouch: {
//     flex: 1,
//   },
//   popup: {
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     backgroundColor: 'white',
//     borderTopLeftRadius: 20,
//     borderTopRightRadius: 20,
//     height: Dimensions.get('window').height * 0.75,
//     padding: 20,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 20,
//   },
//   title: {
//     fontSize: 20,
//     fontWeight: '600',
//   },
//   closeButton: {
//     padding: 5,
//   },
//   closeText: {
//     fontSize: 24,
//     color: '#ff6600',
//   },
//   content: {
//     flex: 1,
//     alignItems: 'center',
//     paddingTop: 20,
//   },
//   description: {
//     textAlign: 'center',
//     color: '#666',
//     marginBottom: 20,
//   },
//   cardFormContainer: {
//     width: '100%',
//     marginBottom: 20,
//   },
//   cardForm: {
//     width: '100%',
//     height: 200,
//   },
// });

// export default PaymentPopup;

================
File: src/services/auth.ts
================
// signUp.js
import { createUserWithEmailAndPassword, updateProfile, getIdToken } from 'firebase/auth';
import axios from 'axios';
import { auth } from '../../firebaseConfig';
import * as FileSystem from 'expo-file-system';


export async function signUp(email, password, displayName) {
  try {
    // Create user with email and password
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // Update user profile with display name
    await updateProfile(user, { displayName });

    // Get ID token
    
    await user.reload(); // Reloads user to fetch updated profile info
    const idToken = await getIdToken(user, true);

    // // Save ID token to a text file
    // await saveIdTokenToFile(idToken);

    // Send token to backend
    await sendTokenToBackend(idToken);
  } catch (error) {
    console.error('Error during sign-up:', error);
    throw error;
  }
}

async function sendTokenToBackend(idToken) {
  try {
    await axios.post('https://e900-80-39-253-43.ngrok-free.app/auth/firebase/signup', {}, {
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });
  } catch (error) {
    console.error('Error sending token to backend:', error);
    throw error;
  }
}

// async function saveIdTokenToFile(idToken) {
//   try {
//     const path = `${FileSystem.documentDirectory}idToken.txt`;
//     await FileSystem.writeAsStringAsync(path, idToken, { encoding: FileSystem.EncodingType.UTF8 });
//     console.log('ID token saved to', path);
//   } catch (error) {
//     console.error('Error saving ID token to file:', error);
//     throw error;
//   }
// }

================
File: src/services/stripe-api.ts
================
// src/services/stripe-api.ts
const API_URL = 'https://e900-80-39-253-43.ngrok-free.app/stripe'; // Replace with your server's URL

export const fetchPaymentSheetParams = async (idToken: string) => {
  try {
    const response = await fetch(`${API_URL}/payment-sheet`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${idToken}`
      },
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const { setupIntent, ephemeralKey, customer, publishableKey } =
      await response.json();
    return { setupIntent, ephemeralKey, customer, publishableKey };
  } catch (error) {
    console.error('Error fetching payment sheet params:', error);
    return { error };
  }
};

================
File: src/theme/colors.ts
================
const colors = {
  orange: "#FF5900",
  white: "#FFFFFF",
  black: "#000000",
  onboardingBackground: "#FFF6F1",
};

export default colors;

================
File: src/types/index.ts
================
export interface CarouselItem {
  image: any;
  title: string;
  subtitle: string;
}

================
File: src/utils/constants/dimensions.ts
================
import { Dimensions } from "react-native";

export const SCREEN_WIDTH = Dimensions.get("window").width;
export const SCREEN_HEIGHT = Dimensions.get("window").height;

================
File: src/utils/fonts.ts
================
import { loadAsync } from "expo-font";

export const loadFonts = async () => {
  try {
    await loadAsync({
      "InstrumentSerif-Regular": require("../../assets/fonts/Instrument_Serif/InstrumentSerif-Regular.ttf"),
      "InstrumentSerif-Italic": require("../../assets/fonts/Instrument_Serif/InstrumentSerif-Italic.ttf"),
    });
  } catch (e) {
    console.log("Erreur loading fonts : " + e);
  }
};

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

================
File: app.json
================
{
  "expo": {
    "name": "Pledge",
    "slug": "pledge-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "cover",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "googleServicesFile": "./GoogleService-Info.plist",
      "supportsTablet": false,
      "buildNumber": "4",
      "bundleIdentifier": "com.pledgeinc.pledge",
      "infoPlist": {
        "NSCameraUsageDescription": "Pledge does not usage camera for any purpose"
      }
    },
    "extra": {
      "eas": {
        "projectId": "e7e2e883-b2f3-4d92-964c-0e0608a1ff96"
      }
    },
    "owner": "pledge"
  },
  "android": {
    "adaptiveIcon": {
      "foregroundImage": "./assets/adaptive-icon.png",
      "backgroundColor": "#ffffff"
    },
    "package": "com.pledge.pledgeApp"
  },
  "web": {
    "favicon": "./assets/favicon.png"
  },
  "extra": {
    "eas": {
      "projectId": "e7e2e883-b2f3-4d92-964c-0e0608a1ff96"
    }
  },
  "owner": "pledge",
  "plugins": [
    "expo-font",
    "expo-localization",
    "@react-native-firebase/app",
    "@react-native-firebase/auth",
    [
      "expo-build-properties",
      {
        "ios": {
          "useFrameworks": "static"
        }
      }
    ],
    [
      "@stripe/stripe-react-native",
      {
        "merchantIdentifier": "merchant.pledge.applepay",
        "enableGooglePay": false
      }
    ]
  ]
}

================
File: App.tsx
================
// File: App.tsx
import React, { useCallback, useState, useEffect } from "react";
import { View, Text } from "react-native";
import "react-native-gesture-handler";
import { NavigationContainer } from "@react-navigation/native";
import * as SplashScreen from "expo-splash-screen";
import { SafeAreaProvider } from "react-native-safe-area-context";
import useAppInit from "./src/hooks/useAppInit";
import { StripeProvider } from "@stripe/stripe-react-native";
import AppNavigator from "./src/navigation";
import { fetchPaymentSheetParams } from "./src/services/stripe-api";
import { onAuthStateChanged, getIdToken } from "firebase/auth";
import { auth } from "./firebaseConfig"; 

SplashScreen.preventAutoHideAsync();

function AppContent({ initialRouteName, onLayoutRootView }) {
  return (
    <SafeAreaProvider>
      <View style={{ flex: 1 }} onLayout={onLayoutRootView}>
        <AppNavigator initialRouteName={initialRouteName} />
      </View>
    </SafeAreaProvider>
  );
}

export default function App() {
  const { isLoadingComplete, initialRouteName } = useAppInit();
  const [publishableKey, setPublishableKey] = useState<string>("");
  const [isUserLoading, setIsUserLoading] = useState(true); // To handle auth state loading

  const onLayoutRootView = useCallback(async () => {
    if (isLoadingComplete) {
      await SplashScreen.hideAsync();
    }
  }, [isLoadingComplete]);

  useEffect(() => {
    if (!isLoadingComplete) return;

    // Listen for auth state changes.
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        try {
          const idToken = await getIdToken(user);
          // Fetch the payment sheet params using the idToken
          const { publishableKey } = await fetchPaymentSheetParams(idToken);
          if (publishableKey) {
            setPublishableKey(publishableKey);
          }
        } catch (error) {
          console.error("Error fetching publishable key:", error);
        }
      } else {
        // User not authenticated, handle this case as needed.
        // For instance, show a login screen or proceed with no payment methods.
        setPublishableKey("");
      }
      setIsUserLoading(false);
    });

    return () => unsubscribe();
  }, [isLoadingComplete]);

  // Wait until everything is ready
  if (!initialRouteName || !isLoadingComplete || isUserLoading) {
    return null; // Or a loading spinner
  }

  // If publishableKey is empty (and user is logged out), you may choose to handle that differently
  // if (!publishableKey) {
  //   return (
  //     <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
  //       <Text>No Publishable Key Found. Please log in.</Text>
  //     </View>
  //   );
  // }

  return (
    <StripeProvider publishableKey={publishableKey}
                    merchantIdentifier="merchant.pledge.applepay" // required for Apple Pay
    >  
      <NavigationContainer>
        <AppContent
          initialRouteName={initialRouteName}
          onLayoutRootView={onLayoutRootView}
        />
      </NavigationContainer>
    </StripeProvider>
  );
}

================
File: babel.config.js
================
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

================
File: eas.json
================
{
  "cli": {
    "version": ">= 7.8.4"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {}
  },
  "submit": {
    "production": {}
  }
}

================
File: firebaseConfig.js
================
// firebaseConfig.js
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  apiKey: "AIzaSyAXF4qgP-1Ikb_go9uZPHAbdoReKLd8U1o",
  authDomain: "pledgetrial.firebaseapp.com",
  projectId: "pledgetrial",
  storageBucket: "pledgetrial.firebasestorage.app",
  messagingSenderId: "1052661908414",
  appId: "1:1052661908414:web:222704e8db5194216aafef",
  measurementId: "G-D5H76LKXV2"

}; 


const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

export { auth };

================
File: GoogleService-Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>API_KEY</key>
	<string>AIzaSyBnuqM45dOJXnmrrnVfr8Gj4AiRX73OTOc</string>
	<key>GCM_SENDER_ID</key>
	<string>1052661908414</string>
	<key>PLIST_VERSION</key>
	<string>1</string>
	<key>BUNDLE_ID</key>
	<string>com.pledgecompany.pledge</string>
	<key>PROJECT_ID</key>
	<string>pledgetrial</string>
	<key>STORAGE_BUCKET</key>
	<string>pledgetrial.firebasestorage.app</string>
	<key>IS_ADS_ENABLED</key>
	<false></false>
	<key>IS_ANALYTICS_ENABLED</key>
	<false></false>
	<key>IS_APPINVITE_ENABLED</key>
	<true></true>
	<key>IS_GCM_ENABLED</key>
	<true></true>
	<key>IS_SIGNIN_ENABLED</key>
	<true></true>
	<key>GOOGLE_APP_ID</key>
	<string>1:1052661908414:ios:3109b70dd48262b76aafef</string>
</dict>
</plist>

================
File: package.json
================
{
  "name": "pledge-app",
  "version": "1.0.0",
  "main": "expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-native-firebase/app": "^21.2.0",
    "@react-navigation/stack": "^6.4.1",
    "@stripe/stripe-react-native": "0.38.6",
    "@types/react": "~18.3.12",
    "expo": "^52.0.0",
    "expo-dev-client": "^5.0.5",
    "expo-font": "~13.0.1",
    "expo-localization": "~16.0.0",
    "expo-splash-screen": "~0.29.18",
    "expo-status-bar": "~2.0.0",
    "react": "18.3.1",
    "react-native": "0.76.5",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.1.0",
    "react-native-svg": "15.8.0",
    "typescript": "~5.3.3"
  },
  "devDependencies": {
    "@babel/core": "^7.24.0",
    "@react-native-community/cli": "^15.1.2",
    "@types/react-native": "^0.73.0",
    "expo-cli": "^6.3.10"
  },
  "private": true
}

================
File: README.md
================
cd pledge-app
## Prerequisites

You need to use at least `nvm` > 18:
```sh
nvm use 18
```

## Run the App in the Simulator

To run the app in the simulator, use:
```sh
npx expo run:[ios or android]
```

## Export to Transporter for TestFlight

To export it to Transporter and get it on TestFlight, you need to use `EAS`:
```sh
eas build --platform [ios or android] --profile production
```

================
File: tsconfig.json
================
{
  "compilerOptions": {},
  "extends": "expo/tsconfig.base"
}

